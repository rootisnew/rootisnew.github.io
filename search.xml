<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ubuntu18.04【Lsyncd】文件实时同步</title>
      <link href="/2022/05/01/Ubuntu18.04%E3%80%90Lsyncd%E3%80%91%E6%96%87%E4%BB%B6%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/"/>
      <url>/2022/05/01/Ubuntu18.04%E3%80%90Lsyncd%E3%80%91%E6%96%87%E4%BB%B6%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>Lsyncd是Rsync + ssh是一种高级操作配置，它使用SSH来操作文件和目录，直接在目标上移动，而不是通过线路重新传输移动目.可以最快的速度去让目标主机做到同步功能</p></blockquote><p><strong>环境</strong></p><pre><code>nginx1: 10.0.0.87nginx2: 10.0.0.88</code></pre><p><strong>安装使用aliyun的源即可apt安装</strong></p><pre><code>apt-get install lsyncdapt install rsync</code></pre><p><strong>查看安装的版本</strong></p><pre><code>root@k8s-etcd1:/etc/nginx# lsyncd --versionVersion: 2.1.6</code></pre><h2 id="创建必要文件夹"><a href="#创建必要文件夹" class="headerlink" title="创建必要文件夹"></a>创建必要文件夹</h2><pre><code>mkdir /etc/lsyncd #ubuntu需要手动创建配置文件定义mkdir /var/log/lsyncdtouch /var/log/lsyncd/lsyncd.&#123;log,status&#125;</code></pre><h2 id="配置免密登陆"><a href="#配置免密登陆" class="headerlink" title="配置免密登陆"></a>配置免密登陆</h2><pre><code>ssh-keygen -t rsassh-copy-id root@10.0.0.88ssh root@10.0.0.88 (无需密码即可登陆)</code></pre><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><pre><code>cd /etc/lsyncd/vim lsyncd_nginx.luasettings &#123;        logfile = &quot;/var/log/lsyncd/lsyncd-nginx.log&quot;,  --定义日志文件        statusFile = &quot;/var/log/lsyncd/lsyncd-nginx.status&quot;  --定义状态文件&#125;sync &#123;        default.rsyncssh,            source = &quot;/etc/nginx&quot;, --源目录        host = &quot;10.0.0.88&quot;, --目的主机        targetdir = &quot;/etc/nginx&quot;, --远程目录        delete = true,        delay = 0,    --延迟--       exclude=&#123;                 --            &quot;.txt&quot;             --排除--        &#125;,    rsync = &#123;               binary = &quot;/usr/bin/rsync&quot;,               archive = true, --归档               compress = true, --压缩               verbose = true,               owner = true,   --属主               perms = true,   --权限               _extra = &#123;&quot;--bwlimit=2000&quot;&#125;,                &#125;,        ssh = &#123;             port = 22              &#125;&#125;</code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><pre><code>root@k8s-etcd1:/etc/nginx#lsyncd lsyncd_nginx.lua #指定配置文件运行root@k8s-etcd1:/etc/nginx# ps -ef&#39;grep lsyncd&#39;grep -v greproot      16693      1  0 17:35 ?        00:00:00 lsyncd /etc/lsyncd/lsyncd_nginx.lua</code></pre><h2 id="测试实时同步时间"><a href="#测试实时同步时间" class="headerlink" title="测试实时同步时间"></a>测试实时同步时间</h2><p>这个11G的文件目标数据同步过来之后大概是5分钟左右，具体需要根据服务器配置等优化</p><pre><code>root@k8s-etcd1:/etc/nginx# dd if=/dev/zero of=test bs=1M count=1024010240+0 records in</code></pre><p><strong>目标主机查看是否数据一致</strong></p><pre><code>root@k8s-etcd2:/etc/nginx# cd /etc/nginx/root@k8s-etcd2:/etc/nginx# du -sh test11G test</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、k8s安装DNS以及dashboad</title>
      <link href="/2022/01/04/%E4%B8%89%E3%80%81k8s%E5%AE%89%E8%A3%85DNS%E4%BB%A5%E5%8F%8Adashboad/"/>
      <url>/2022/01/04/%E4%B8%89%E3%80%81k8s%E5%AE%89%E8%A3%85DNS%E4%BB%A5%E5%8F%8Adashboad/</url>
      
        <content type="html"><![CDATA[<blockquote><p>k8s有一个很重要的服务特性（服务发现）。一个service被创建，那么这个service的IP和port都可以注入pod使用。<br>Kubernetes主要支持两种service发现机制：环境变量和DNS。<br>没有dns服务的时候，kubernetes会采用环境变量的形式，一旦有很多个service，环境变量会变得很复杂，为了解决这个问题，我们使用DNS服务。</p></blockquote><pre><code>root@k8s-master1:/etc/kubeasz# kubectl get pod -o wideNAME        READY   STATUS    RESTARTS   AGE     IP             NODE        NOMINATED NODE   READINESS GATESnet-test1   1/1     Running   0          6d22h   10.200.218.1   10.0.0.48   &lt;none&gt;           &lt;none&gt;net-test2   1/1     Running   0          6d22h   10.200.218.2   10.0.0.48   &lt;none&gt;           &lt;none&gt;我们进入容器ping 另一个容器的IP是可以ping通的 ，但是我无法ping域名root@k8s-master1:/etc/kubeasz# kubectl exec -it net-test1 sh/ #ping: bad address &#39;www.baidu.com&#39;/ # ping 10.200.218.2PING 10.200.218.2 (10.200.218.2): 56 data bytes64 bytes from 10.200.218.2: seq=0 ttl=63 time=0.174 ms#k8s容器的第一个地址都是被apiserver占用了root@k8s-master1:/etc/kubeasz# kubectl get svc -ANAMESPACE   NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGEdefault     kubernetes   ClusterIP   10.100.0.1   &lt;none&gt;        443/TCP   6d23h</code></pre><h2 id="安装Core-dns-（方法1）"><a href="#安装Core-dns-（方法1）" class="headerlink" title="安装Core-dns （方法1）"></a>安装Core-dns （方法1）</h2><ul><li><p>dns安装有多重方法  有kubedns和coredns  ，现在基本都是coredns，因为1.18以后不支持kube-dns<br>我们可以进入刚才升级的k8s包里找到kubedns文件</p><p>root@k8s-master1:&#x2F;etc&#x2F;kubeasz# cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;kubernetes&#x2F;cluster&#x2F;addons&#x2F;dns&#x2F;coredns&#x2F;<br>里面都是官方定义好的模板，稍微修改一下就可以使用</p><p>我们拷贝一到root下面，然后进行修改</p><h1 id="cp-coredns-yaml-base-x2F-root-x2F"><a href="#cp-coredns-yaml-base-x2F-root-x2F" class="headerlink" title="cp coredns.yaml.base &#x2F;root&#x2F;"></a>cp coredns.yaml.base &#x2F;root&#x2F;</h1><h1 id="cd-x2F-root-x2F"><a href="#cd-x2F-root-x2F" class="headerlink" title="cd &#x2F;root&#x2F;"></a>cd &#x2F;root&#x2F;</h1><p>root@k8s-master1:~# mv coredns.yaml.base coredns.yaml</p></li><li><p>定义dns配置文件</p><pre><code>查看部署k8s定义好的集群名称</code></pre><p>root@k8s-master1:~# cat &#x2F;etc&#x2F;kubeasz&#x2F;clusters&#x2F;k8s-01&#x2F;hosts ‘grep -i “cluster_dns_domain&#x3D;”<br>CLUSTER_DNS_DOMAIN&#x3D;”yhtzjy.local”</p></li><li><p>开始编辑dns配置文件 指定dns名称</p><pre><code>root@k8s-master1:~# vim coredns.yaml</code></pre><p>kubernetes yhtzjy.local in-addr.arpa ip6.arpa { #定义dns名称<br>forward . 223.6.6.6 { #如果解析不了的域名会转发到这个配置文件当中，可以直接转发到阿里解析，默认我们的dns只能解析公司内部    默认配置文件forward . &#x2F;etc&#x2F;resolv.conf<br>image: 10.0.0.81&#x2F;baseimages&#x2F;coredns:1.8.4 #默认镜像是从google下载，可能无法下载，我们可以在网址搜索 ( hub.docker.com )上搜索 coredns&#x2F;coredns  手动下载<br>memory: 512m  #内存显示，生产建议在大些<br>cpu: 200m    #CPU限制<br>clusterIP: 10.100.0.2 #定义DNS的service地址</p></li><li><p>手动下载dns镜像以及上传至我们的harbor服务器</p><p>root@k8s-master1:<del># docker pull coredns&#x2F;coredns:1.8.4<br>root@k8s-master1:</del># docker tag coredns&#x2F;coredns:1.8.4 10.0.0.81&#x2F;baseimages&#x2F;coredns:1.8.4<br>root@k8s-master1:~# docker push 10.0.0.81&#x2F;baseimages&#x2F;coredns:1.8.4</p></li><li><p><strong>dns优化方案</strong></p></li><li><p>coredns只负责查询和记录，所以占用CPU 较高，如果网站访问慢，可以优化dns(说明域名解析慢)</p><blockquote><p>1 、把限制调高，或者主机增加内存和CPU。如果上千个容器至少需要三台coredns   每台服务器配置要求 4C 4G<br>2 、宿主机添加缓存，这样也可以增加速度  需要安装 （dnsmasq组件、nodelocaldns 都可以域名解析加速 ）</p></blockquote></li></ul><h2 id="启动dns的yaml文件"><a href="#启动dns的yaml文件" class="headerlink" title="启动dns的yaml文件"></a>启动dns的yaml文件</h2><pre><code>root@k8s-master1:~# kubectl apply -f coredns.yaml- 查看dns是否启动成功root@k8s-master1:~# kubectl get pod -A&#39;grep -i corednskube-system   coredns-6949dff4db-ppt2k                  0/1     Running   0          2m3s- 如果启动失败就查看日志是什么原因   -n指定namespace   出现Readiness probe failed: HTTP probe failed with statuscode: 503 （代表服务没有启动成功）root@k8s-master1:~# kubectl describe pod  coredns-6949dff4db-ppt2k -n kube-system</code></pre><p>因为没启动，我们删除文件，重建一下，可能是网络问题,或者yaml文件配置错误</p><pre><code>root@k8s-master1:~# kubectl delete -f coredns.yamlroot@k8s-master1:~# kubectl apply -f coredns.yamlroot@k8s-master1:~# kubectl get pod -A</code></pre><h2 id="安装Core-dns-（方法2）"><a href="#安装Core-dns-（方法2）" class="headerlink" title="安装Core-dns （方法2）"></a>安装Core-dns （方法2）</h2><blockquote><p>方法1 可能会启动失败,需要换成1.8.3的镜像，可以直接用下面的yaml文件去创建，clusterip 是提前指定的service地址段 10.100.0.0</p></blockquote><pre><code>root@k8s-master1:/opt# cat coredns1.8.3.ymlapiVersion: v1kind: ServiceAccountmetadata:  name: coredns  namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata:  labels:    kubernetes.io/bootstrapping: rbac-defaults  name: system:corednsrules:  - apiGroups:    - &quot;&quot;    resources:    - endpoints    - services    - pods    - namespaces    verbs:    - list    - watch  - apiGroups:    - discovery.k8s.io    resources:    - endpointslices    verbs:    - list    - watch---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  annotations:    rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;  labels:    kubernetes.io/bootstrapping: rbac-defaults  name: system:corednsroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: system:corednssubjects:- kind: ServiceAccount  name: coredns  namespace: kube-system---apiVersion: v1kind: ConfigMapmetadata:  name: coredns  namespace: kube-systemdata:  Corefile: &#39;    .:53 &#123;        errors        health &#123;          lameduck 5s        &#125;        ready        kubernetes yhtzjy.local in-addr.arpa ip6.arpa &#123;          fallthrough in-addr.arpa ip6.arpa        &#125;        prometheus :9153        forward . 223.6.6.6 &#123;          max_concurrent 1000        &#125;        cache 30        loop        reload        loadbalance    &#125;---apiVersion: apps/v1kind: Deploymentmetadata:  name: coredns  namespace: kube-system  labels:    k8s-app: kube-dns    kubernetes.io/name: &quot;CoreDNS&quot;spec:  # replicas: not specified here:  # 1. Default is 1.  # 2. Will be tuned in real time if DNS horizontal auto-scaling is turned on.  strategy:    type: RollingUpdate    rollingUpdate:      maxUnavailable: 1  selector:    matchLabels:      k8s-app: kube-dns  template:    metadata:      labels:        k8s-app: kube-dns    spec:      priorityClassName: system-cluster-critical      serviceAccountName: coredns      tolerations:        - key: &quot;CriticalAddonsOnly&quot;          operator: &quot;Exists&quot;      nodeSelector:        kubernetes.io/os: linux      affinity:         podAntiAffinity:           preferredDuringSchedulingIgnoredDuringExecution:           - weight: 100             podAffinityTerm:               labelSelector:                 matchExpressions:                   - key: k8s-app                     operator: In                     values: [&quot;kube-dns&quot;]               topologyKey: kubernetes.io/hostname      containers:      - name: coredns        image: coredns/coredns:1.8.3        imagePullPolicy: IfNotPresent        resources:          limits:            memory: 170Mi          requests:            cpu: 100m            memory: 70Mi        args: [ &quot;-conf&quot;, &quot;/etc/coredns/Corefile&quot; ]        volumeMounts:        - name: config-volume          mountPath: /etc/coredns          readOnly: true        ports:        - containerPort: 53          name: dns          protocol: UDP        - containerPort: 53          name: dns-tcp          protocol: TCP        - containerPort: 9153          name: metrics          protocol: TCP        securityContext:          allowPrivilegeEscalation: false          capabilities:            add:            - NET_BIND_SERVICE            drop:            - all          readOnlyRootFilesystem: true        livenessProbe:          httpGet:            path: /health            port: 8080            scheme: HTTP          initialDelaySeconds: 60          timeoutSeconds: 5          successThreshold: 1          failureThreshold: 5        readinessProbe:          httpGet:            path: /ready            port: 8181            scheme: HTTP      dnsPolicy: Default      volumes:        - name: config-volume          configMap:            name: coredns            items:            - key: Corefile              path: Corefile---apiVersion: v1kind: Servicemetadata:  name: kube-dns  namespace: kube-system  annotations:    prometheus.io/port: &quot;9153&quot;    prometheus.io/scrape: &quot;true&quot;  labels:    k8s-app: kube-dns    kubernetes.io/cluster-service: &quot;true&quot;    kubernetes.io/name: &quot;CoreDNS&quot;spec:  selector:    k8s-app: kube-dns  clusterIP: 10.100.0.2  ports:  - name: dns    port: 53    protocol: UDP  - name: dns-tcp    port: 53    protocol: TCP  - name: metrics    port: 9153    protocol: TCP</code></pre><ul><li><p>查看启动成功</p><pre><code># kubectl apply -f coredns1.8.3.yml</code></pre><h1 id="kubectl-get-pod-A"><a href="#kubectl-get-pod-A" class="headerlink" title="kubectl get pod -A"></a>kubectl get pod -A</h1><p>kube-system   coredns-f97dc456d-wn4js                    1&#x2F;1     Running   0          19s</p></li><li><p><strong>为了让我们的dns兼容性更好，可以使用官方的脚本，前提是必须dns跑起来才能下载</strong></p><pre><code>进入github  把这个dns克隆下来</code></pre><p>root@k8s-master1:&#x2F;opt# git clone  <a href="https://github.com/coredns/deployment.git">https://github.com/coredns/deployment.git</a><br>root@k8s-master1:&#x2F;opt# cd deployment&#x2F;<br>root@k8s-master1:&#x2F;opt&#x2F;deployment# cd kubernetes&#x2F;<br>root@k8s-master1:&#x2F;opt&#x2F;deployment&#x2F;kubernetes# .&#x2F;deploy.sh &gt;coredns.1.8.4.yml<br>把早期部署好的dns文件删除<br>root@k8s-master1:&#x2F;opt&#x2F;deployment&#x2F;kubernetes# kubectl delete -f &#x2F;opt&#x2F;coredns1.8.3.yml<br>编辑刚生成的文件，地址会自动获取<br>kubernetes yhtzjy.local in-addr.arpa ip6.arpa</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、k8s集群维护（升级，添加，删除）</title>
      <link href="/2022/01/03/%E4%BA%8C%E3%80%81k8s%E9%9B%86%E7%BE%A4%E7%BB%B4%E6%8A%A4%EF%BC%88%E5%8D%87%E7%BA%A7%EF%BC%8C%E6%B7%BB%E5%8A%A0%EF%BC%8C%E5%88%A0%E9%99%A4%EF%BC%89/"/>
      <url>/2022/01/03/%E4%BA%8C%E3%80%81k8s%E9%9B%86%E7%BE%A4%E7%BB%B4%E6%8A%A4%EF%BC%88%E5%8D%87%E7%BA%A7%EF%BC%8C%E6%B7%BB%E5%8A%A0%EF%BC%8C%E5%88%A0%E9%99%A4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="k8s版本升级"><a href="#k8s版本升级" class="headerlink" title="k8s版本升级"></a>k8s版本升级</h2><blockquote><p>温馨提示 ： k8s升级一定要测试环境测试好，最好不要跨大版本,而且需要停止服务    首先进入官网找到需要下载的版本</p><pre><code>https://github.com/kubernetes/kubernetes/releases下面是我们需要升级的版本 1.21.4，需要把安装包down下来，选择amd.tar.gz  下载好之后上传至部署节点https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.21.md#downloads-for-v1214</code></pre><p><strong>上传安装包</strong></p><pre><code>root@k8s-master1:~# cd /usr/local/src/root@k8s-master1:/usr/local/src# lskubernetes-v1.21.4-client-linux-amd64.tar.gzkubernetes-v1.21.4-node-linux-amd64.tar.gzkubernetes-v1.21.4-server-linux-amd64.tar.gzkubernetes-v1.21.4.tar.gz$解压安装包root@k8s-master1:/usr/local/src# tar xf kubernetes-v1.21.4-client-linux-amd64.tar.gzroot@k8s-master1:/usr/local/src# tar xf  kubernetes-v1.21.4-node-linux-amd64.tar.gztroot@k8s-master1:/usr/local/src# tar xf kubernetes-v1.21.4-server-linux-amd64.tar.gzroot@k8s-master1:/usr/local/src# tar xf kubernetes-v1.21.4.tar.gz</code></pre><p>进入解压目录，里面存放这我们需要升级的server以及node文件</p><pre><code>root@k8s-master1:/usr/local/src# cd kubernetes/root@k8s-master1:/usr/local/src/kubernetes# lsaddons  cluster  hack                   LICENSES  README.md  versionclient  docs     kubernetes-src.tar.gz  node      server</code></pre><h2 id="升级master"><a href="#升级master" class="headerlink" title="升级master"></a>升级master</h2><p>首先我们需要知道Server上都有哪些组件需要升级  ，分别是：<br>kuber-scheduler<br>kuber-contoller-manager<br>apiextensions-apiserver<br>kube-proxy<br>kubelete<br>kuberctl</p><pre><code>root@k8s-master1:/usr/local/src/kubernetes# cd server/bin/root@k8s-master1:/usr/local/src/kubernetes/server/bin# ll</code></pre><p>先停止一台master，为了保证集群的可用性,主节点挂了之后我们的负载均衡器会调度另一台为主节点<br>如果保险起见可以进入负载均衡器，把需要升级的一台注释，然后批量升级在取消注释</p></blockquote><p><strong>停止服务</strong></p><pre><code>root@k8s-master1:# systemctl stop kube-apiserver.service kube-proxy.service kube-controller-manager.service kubelet.service kube-scheduler.service</code></pre><p><strong>拷贝二进制</strong></p><pre><code># pwd/usr/local/src/kubernetes/server/binroot@k8s-master1:/usr/local/src/kubernetes/server/bin# cp kube-apiserver kube-proxy kube-controller-manager kube-scheduler kubelet /usr/bin/root@k8s-master1:/usr/local/src/kubernetes/server/bin# systemctl start kube-apiserver.service kube-proxy.service kube-controller-manager.service kubelet.service kube-scheduler.service</code></pre><p><strong>验证是否升级成功</strong><br>如果升级成功其他master按照此操作批量操作，或者写脚本一键升级</p><pre><code>root@k8s-master1:/usr/local/src/kubernetes/server/bin# kubectl get nodeNAME        STATUS                     ROLES    AGE     VERSION10.0.0.18   Ready,SchedulingDisabled   master   6d19h   v1.21.4</code></pre><h2 id="升级node"><a href="#升级node" class="headerlink" title="升级node"></a>升级node</h2><pre><code>&gt; node需要升级的几个组件，分别是：kubectlkubeletekube-proxy</code></pre><p>先升级其中一台node测试，主节点把安装包拷贝过来，一定要先停服务在master节点拷贝数据包</p><pre><code>root@k8s-node1:~# systemctl stop kubelet kube-proxyroot@k8s-master1:/usr/local/src/kubernetes/server/bin# scp kubelet kube-proxy kubectl 10.0.0.48:/usr/binroot@k8s-node1:~# systemctl start kubelet kube-proxy</code></pre><p>在master节点查看是否升级成功,版本显示成功就没问题，然后就可以批量升级</p><pre><code>$ kubectl  get node10.0.0.48   Ready                      node     6d18h   v1.21.4</code></pre><h2 id="更换主节点系统版本"><a href="#更换主节点系统版本" class="headerlink" title="更换主节点系统版本"></a>更换主节点系统版本</h2><blockquote><p>为了保证我们后期添加节点版本一致，所以安装节点需要替换原始版本</p></blockquote><pre><code>强制替换#cp kube-apiserver kube-proxy kube-controller-manager kube-scheduler kubelet /etc/kubeasz/bin/</code></pre><ul><li><p>检查版本是否替换成功至1.21.4</p><p>root@k8s-master1:~# cd &#x2F;etc&#x2F;kubeasz&#x2F;bin&#x2F;<br>root@k8s-master1:&#x2F;etc&#x2F;kubeasz&#x2F;bin# .&#x2F;kubelet –version<br>Kubernetes v1.21.4</p></li></ul><h2 id="添加node节点"><a href="#添加node节点" class="headerlink" title="添加node节点"></a>添加node节点</h2><p>需要免密先提前做好</p><pre><code>cd /etc/kubeasz/./ezctl add-node k8s-01 10.0.0.81成功之后就使用kubectl 测试是否加入成功</code></pre><h2 id="添加master节点"><a href="#添加master节点" class="headerlink" title="添加master节点"></a>添加master节点</h2><blockquote><p>需要注意时间需要一致,负载均衡器会把master的配置文件重新推送</p></blockquote><pre><code>./ezctl add-master k8s-01 10.0.0.89添加成功之后可以在负载均衡配置文件看到添加好的信息root@k8s-master1:/etc/kubeasz# cat /etc/kube-lb/conf/kube-lb.conf</code></pre><p><strong>删除节点</strong><br>按照上面操作很简单 </p><pre><code>    del-etcd    &lt;cluster&gt;  &lt;ip&gt;      to delete a etcd-node from the etcd cluster    del-master  &lt;cluster&gt;  &lt;ip&gt;      to delete a master node from the k8s cluster    del-node    &lt;cluster&gt;  &lt;ip&gt;      to delete a work node from the k8s cluster</code></pre>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、k8s集群使用kubeasz安装</title>
      <link href="/2022/01/02/%E4%B8%80%E3%80%81k8s%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8kubeasz%E5%AE%89%E8%A3%85/"/>
      <url>/2022/01/02/%E4%B8%80%E3%80%81k8s%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8kubeasz%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="安装方式介绍"><a href="#安装方式介绍" class="headerlink" title="安装方式介绍"></a>安装方式介绍</h2><ul><li>目前创建K8S集群的安装程序最受欢迎的有Kops，Kubespray，kubeadm，rancher，以及提供的脚本集等。</li><li>网页快捷安装推荐使用 rancher</li><li>ansible 脚本学习安装 推荐使用 kubeasz (这里我用的是ubuntu-1804)</li></ul><p><strong>高可用集群所需节点配置如下</strong></p><pre><code>master:三台（实验环境和etcd部署在同一台服务器上）ectd ：三台 （生产环境建议分开）haproxy结合keepalived：一台（高可用方案可以做两台主从）harbor：一台 （高可用方案可以做两台主从）</code></pre><ul><li><p><strong>首先所有主机名添加解析，修改主机名（k8s中主机名必须是不同的）</strong></p><p>root@ubuntu1804:<del># hostnamectl set-hostname k8s-master1.example.com<br>root@ubuntu1804:</del># hostnamectl set-hostname k8s-node1.example.com<br>root@ubuntu1804:~# hostnamectl set-hostname k8s-harbor1.example.com<br>echo “127.0.1.1       k8s-master1.example.com” &gt;&gt; &#x2F;etc&#x2F;hosts<br>echo “127.0.1.1       k8s-node1.example.com” &gt;&gt; &#x2F;etc&#x2F;hosts</p></li><li><p><strong>添加源 安装需要下载一些基础服务</strong></p><h1 id="如果下载失败就更换阿里云-或者别的源"><a href="#如果下载失败就更换阿里云-或者别的源" class="headerlink" title="如果下载失败就更换阿里云  或者别的源"></a>如果下载失败就更换阿里云  或者别的源</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">    deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">    deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">    deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">    deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">    deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">    deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">    deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">    deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multivers</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    ## keepalived配置</span><br><span class="line"></span><br><span class="line">        首先我们把负载均衡安装好，如果是两台的话机器配置一样   （keepalived和haproxy只需要两台作为高可用）</span><br><span class="line">    1 root@k8s-ha1:~# apt install keepalived haproxy -y</span><br><span class="line">    root@k8s-ha1:~# systemctl start keepalived.service haproxy.service &amp;&amp; systemctl enable --now  keepalived.service haproxy.service</span><br><span class="line">root@k8s-ha1:~# cp /usr/share/doc/keepalived/samples/keepalived.conf.vrrp /etc/keepalived/keepalived.conf</span><br><span class="line">    </span><br><span class="line">    ## Haproxy配置</span><br><span class="line">    </span><br><span class="line">k8s默认端口是6443</span><br><span class="line">    root@k8s-ha1:~# ss -ntl&#x27;grep 6443</span><br><span class="line">    root@k8s-ha1:~# scp /etc/haproxy/haproxy.cfg 10.0.0.84:/etc/haproxy/</span><br><span class="line">    </span><br><span class="line">    - 最好两台haproxy都进行以下优化</span><br><span class="line">    默认没有VIP的 haproxy无法启动 ，是因为无法绑定没有的IP，需要添加参数，修改为 1 就可以</span><br><span class="line">    root@k8s-ha2:~# sysctl -a&#x27;grep &quot;nonlocal_bind&quot;</span><br><span class="line">    </span><br><span class="line">    echo &quot;net.ipv4.ip_nonlocal_bind = 1&quot; &gt;&gt; /etc/sysctl.conf  #绑定不存在的虚拟IP</span><br><span class="line">    echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf   #开启路由转发</span><br><span class="line">    -生效参数   root@k8s-ha2:~# sysctl -p</span><br><span class="line">    这个时候就可以重启服务   systemctl restart haproxy.service</span><br><span class="line"></span><br><span class="line">## harbor安装</span><br><span class="line"></span><br><span class="line">    安装docker和docker-compos，可以直接二进制安装   或者gitlab上面搜索，然后解压harbor</span><br><span class="line">    #tar xvf harbor-offline-installer-v2.2.3.tgz</span><br><span class="line">    #cp harbor.yml.tmpl harbor.yml</span><br><span class="line">    然后编辑harbor配置文件，不想走证书就注释https，修改密码等就可以安装harbor</span><br><span class="line">    #./install.sh --with-trivy</span><br><span class="line"></span><br><span class="line"># k8s集群部署准备</span><br><span class="line"></span><br><span class="line">&gt; 基础环境准备进入www.github.com搜索 (kubeasz)里面有教程</span><br><span class="line">&gt; 基于ansibale部署k8s  harbor用于我们的镜像分发，到公司做一些服务部署的时候最好是画一个图，方便日后我们观看 . 首先k8s会访问我们的keepalived 然后在把 请求转发给Apiserver，然后再由Api把请求转发到etcd里面</span><br><span class="line"></span><br><span class="line">**集群规划和基础参数设定**</span><br><span class="line"></span><br><span class="line">    * 注意1：确保各个节点的时间是一致的，推荐chrony</span><br><span class="line">    * 注意2：确保在干净的系统上开始安装，不要使用曾经装过kubeadm或其他k8s发行版的环境</span><br><span class="line">    * 注意3：建议操作系统升级到新的稳定内核 ，1804以下需要升级</span><br><span class="line">    - **在部署节点安装ansible及准备ssh免密登陆**</span><br><span class="line">    </span><br><span class="line">    $ansible部署，主节点一台即可</span><br><span class="line">    #可以直接下载 apt-cache madison ansible 查看版本2.5以上都可以</span><br><span class="line">    curl -O https://bootstrap.pypa.io/pip/2.7/get-ip.py python get-pip.py</span><br><span class="line">    python -m pip install --upgrade &quot;pip &lt; 21.0&quot;</span><br><span class="line">    #pip安装ansible(国内如果安装太慢可以直接用pip阿里云加速)</span><br><span class="line">    pip install ansible -i https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"># 在node节点以及master节点和etcd节点做免秘钥认证</span><br><span class="line"></span><br><span class="line">    #!/bin/bash</span><br><span class="line">    IP=&quot;</span><br><span class="line">    10.0.0.8</span><br><span class="line">    10.0.0.18</span><br><span class="line">    &quot;</span><br><span class="line">    for node in $&#123;IP&#125;;do</span><br><span class="line">      sshpass -p 123456 ssh-copy-id $&#123;node&#125; -o StrictHostKeyChecking=no</span><br><span class="line">      if [ $? -eq 0 ];then</span><br><span class="line">        echo &quot;$&#123;node&#125; 秘钥拷贝完成&quot;</span><br><span class="line">      else</span><br><span class="line">        echo &quot;$&#123;node&#125; 秘钥拷贝失败&quot;</span><br><span class="line">      fi</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line"># 部署节点k8s安装</span><br><span class="line"></span><br><span class="line">    - 1 docker可以自己手动安装</span><br><span class="line">    #因为需要用到docker 默认脚本可能有些慢，docker可以选择自己手动安装或者直接脚本安装 上方的步骤，https://mirrors.aliyun.com/  进去之后搜索doceker-ce  有安装步骤</span><br><span class="line">    </span><br><span class="line">    vim docker_install.sh</span><br><span class="line">    sudo apt-get update</span><br><span class="line">    sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">    # step 2: 安装GPG证书</span><br><span class="line">    curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg &#x27; sudo apt-key add -</span><br><span class="line">    # Step 3: 写入软件源信息</span><br><span class="line">    sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line">    # Step 4: 更新并安装Docker-CE</span><br><span class="line">    sudo apt-get -y update</span><br><span class="line">    apt install docker-ce=5:19.03.15~3-0~ubuntu-bionic docker-ce-cli=5:19.03.15~3-0~ubuntu-bionic -y</span><br><span class="line">    </span><br><span class="line">    2 - # 下载工具脚本ezdown，举例使用kubeasz版本3.1.0</span><br><span class="line">    export release=3.1.0 </span><br><span class="line">    curl -C- -fLO --retry 3 https://github.com/easzlab/kubeasz/releases/download/$&#123;release&#125;/ezdown</span><br><span class="line">    chmod +x ./ezdown</span><br><span class="line">    # 使用工具脚本下载，如果想更换下载的版本就修改ezdown，下面有key安装的服务版本号。是从清华源修改的</span><br><span class="line">    sed -i &#x27;s/DOCKER_VER=20.10.5/DOCKER_VER=19.03.15/g&#x27; ezdown</span><br><span class="line">    ./ezdown -D #他会先判断docker等服务是否下载好 ，如果需要更改版本可以手动指定版本号</span><br><span class="line">    </span><br><span class="line">    root@k8s-master1:~# /etc/kubeasz/bin/kube-apiserver --version</span><br><span class="line">    root@k8s-master1:/usr/src/trojan# ls /etc/kubeasz/down/</span><br><span class="line">    calico_v3.15.3.tar  dashboard_v2.2.0.tar  flannel_v0.13.0-amd64.tar      kubeasz_3.1.0.tar           metrics-server_v0.3.6.tar   pause_3.4.1.tar</span><br><span class="line">    coredns_1.8.0.tar   docker-20.10.5.tgz    k8s-dns-node-cache_1.17.0.tar  metrics-scraper_v1.0.6.tar  nfs-provisioner_v4.0.1.tar  pause.tar</span><br><span class="line"></span><br><span class="line">*   **指定k8s集群**</span><br><span class="line"></span><br><span class="line">    先进入指定目录下面</span><br><span class="line">    root@k8s-master1:~# cd /etc/kubeasz/</span><br><span class="line">    -执行创建，创建好之后会在这个目录下面生成一个cluster目录，然后在创建 k8s01，后面管理需要进入这个目录去修改主机</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# ./ezctl new k8s-01</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# ./ezctl new k8s-02</span><br><span class="line">    root@k8s-master1:/etc/kubeasz/clusters/k8s-01# pwd</span><br><span class="line">    /etc/kubeasz/clusters/k8s-01#定义我们k8s有哪些主机，支持多集群 </span><br><span class="line"></span><br><span class="line">    - 编辑配置文件然后指定我们的集群名称（etcd，master，node）</span><br><span class="line">    root@k8s-master1:/etc/kubeasz/clusters/k8s-01# vim hosts</span><br><span class="line">    ::%s/192.168.1/10.0.0/g #搜索替换，我的服务器地址是10.0.0开头的，后期需要添加或者删除集群就在这里面删除地址 </span><br><span class="line">    [etcd]</span><br><span class="line">    10.0.0.78</span><br><span class="line">    10.0.0.88</span><br><span class="line">    10.0.0.98</span><br><span class="line">    # work node(s)</span><br><span class="line">    [kube_node]</span><br><span class="line">    10.0.0.48</span><br><span class="line">    10.0.0.58</span><br><span class="line">    10.0.0.68</span><br><span class="line">    # [optional] loadbalance for accessing k8s from outside 指定负载均衡地址</span><br><span class="line">    [ex_lb]</span><br><span class="line">    10.0.0.83 LB_ROLE=backup EX_APISERVER_VIP=10.0.0.22 EX_APISERVER_PORT=6443</span><br><span class="line">    Harbor不需要写</span><br><span class="line">    # Network plugins supported: calico, flannel, kube-router, cilium, kube-ovn 经常用的网络插件还有calico</span><br><span class="line">    CLUSTER_NETWORK=&quot;calico&quot;</span><br><span class="line"></span><br><span class="line">    # K8S Service CIDR, not overlap with node(host) networking  指定Service网段</span><br><span class="line">    SERVICE_CIDR=&quot;10.100.0.0/16&quot;</span><br><span class="line">    # Cluster CIDR (Pod CIDR), not overlap with node(host) networking  Cluster容器启动网段，注意不要和公司网段冲突</span><br><span class="line">    CLUSTER_CIDR=&quot;10.200.0.0/16&quot;</span><br><span class="line">    # NodePort Range  指定Service需要暴露端口范围</span><br><span class="line">    NODE_PORT_RANGE=&quot;30000-65000&quot;</span><br><span class="line">    # Cluster DNS Domain   指定域名</span><br><span class="line">    CLUSTER_DNS_DOMAIN=&quot;ythzjy.local&quot;</span><br><span class="line">    # Binaries Directory 放在/usr/bin方便执行命令路径</span><br><span class="line">    bin_dir=&quot;/usr/bin&quot;</span><br><span class="line"></span><br><span class="line">    #修改Cnfig.yml文件</span><br><span class="line">    - 修改好之后还需要修改config文件才能部署，定义集群版本信息（以及证书有效期）</span><br><span class="line">    root@k8s-master1:/etc/kubeasz/clusters/k8s-01# vim config.yml</span><br><span class="line">    # node节点最大pod 数  -默认110</span><br><span class="line">    MAX_PODS: 300</span><br><span class="line">    # coredns 自动安装  我们自己手动安装，dns加速也关闭</span><br><span class="line">    dns_install: &quot;no&quot;</span><br><span class="line">    corednsVer: &quot;1.8.0&quot;</span><br><span class="line">    ENABLE_LOCAL_DNS_CACHE: false #提供DNS域名缓存加速</span><br><span class="line">    # metric server 自动安装</span><br><span class="line">    metricsserver_install: &quot;no&quot;</span><br><span class="line">    metricsVer: &quot;v0.3.6&quot;</span><br><span class="line"></span><br><span class="line">    # dashboard 自动安装</span><br><span class="line">    dashboard_install: &quot;no&quot;</span><br><span class="line"></span><br><span class="line">    - 部署k8s集群</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# cat roles/prepare/templates/95-k8s-sysctl.conf.j2</span><br><span class="line">    #删除下面两个配置，不让k8s执行以下操作（我们已经安装好了）</span><br><span class="line">    vim playbooks/01.prepare.yml</span><br><span class="line">      - ex_lb</span><br><span class="line">      - chrony</span><br><span class="line"></span><br><span class="line">    - 部署k8s-01,会连接我们刚才指定的主机#代表部署我们k8s的第一个集群，后期还有集群就配置k8s-02，如果我们那个任务配置错误  是可以反复执行的 ，后期在添加服务器直接再跑一次这个脚本</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# ./ezctl setup k8s-01 01</span><br><span class="line"></span><br><span class="line"># 部署etcd</span><br><span class="line"></span><br><span class="line">    - 查看etcd的规则</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# cat playbooks/02.etcd.yml</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# cat roles/etcd/tasks/main.yml</span><br><span class="line">    - 开始安装etcd</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# ./ezctl setup k8s-01 02</span><br><span class="line">    部署好之后就可以对外提供服务了 </span><br><span class="line">    </span><br><span class="line">    起来之后进入etcd服务器检查是否监听端口</span><br><span class="line">    root@k8s-etcd1:~# ss -ntl&#x27;grep 2379</span><br><span class="line">    LISTEN   0         32768             10.0.0.78:2379             0.0.0.0:*</span><br><span class="line">    LISTEN   0         32768             127.0.0.1:2379             0.0.0.0:*</span><br><span class="line">    </span><br><span class="line">    验证etcd服务，指定etcd集群，监测etcd心跳，如果是success代表正确</span><br><span class="line">    root@k8s-etcd1:~# export NODE_IPS=&quot;10.0.0.78 10.0.0.88 10.0.0.98&quot;</span><br><span class="line">    root@k8s-etcd1:~# for ip in $&#123;NODE_IPS&#125;;do ETCDCTL_API=3 /usr/bin/etcdctl  --endpoints=https://$&#123;ip&#125;:2379 --cacert=/etc/kubernetes/ssl/ca.pem --cert=/etc/kubernetes/ssl/etcd.pem --key=/etc/kubernetes/ssl/etcd-key.pem endpoint health; done</span><br><span class="line">    https://10.0.0.78:2379 is healthy: successfully committed proposal: took = 6.618167ms</span><br><span class="line">    https://10.0.0.88:2379 is healthy: successfully committed proposal: took = 6.315989ms</span><br><span class="line">    https://10.0.0.98:2379 is healthy: successfully committed proposal: took = 6.916101ms</span><br><span class="line"></span><br><span class="line"># 部署运行时 docker</span><br><span class="line"></span><br><span class="line">    1 、修改配置文件，设置我们的harbor镜像仓库</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# vim clusters/k8s-01/config.yml</span><br><span class="line">    # [docker]信任的HTTP仓库</span><br><span class="line">    INSECURE_REG: &#x27;[&quot;127.0.0.1/8&quot;,&quot;10.0.0.81&quot;]&#x27;</span><br><span class="line">    # [containerd]基础容器镜像  （这里修改为上传docker后的镜像，node下载会加速下载）</span><br><span class="line">    SANDBOX_IMAGE: &quot;10.0.0.81/baseimages/pause-amd64:3.4.1&quot;</span><br><span class="line">    </span><br><span class="line">    root@k8s-master1:/etc/kubeasz# docker pull  easzlab/pause-amd64:3.4.1</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# docker tag docker.io/easzlab/pause-amd64:3.4.1 10.0.0.81/baseimages/pause-amd64:3.4.1</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# docker push 10.0.0.81/baseimages/pause-amd64:3.4.1</span><br><span class="line">    - 在node节点测试是否可以下载镜像</span><br><span class="line">    </span><br><span class="line">    2、$所有服务器都需要有这个文件，然后重启docker，默认没有在master节点安装 ，因为已经安装docker了</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# cat /etc/docker/daemon.json</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;data-root&quot;: &quot;/var/lib/docker&quot;,</span><br><span class="line">      &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">      &quot;insecure-registries&quot;: [&quot;127.0.0.1/8&quot;,&quot;10.0.0.81&quot;],</span><br><span class="line">    root@k8s-node1:~# scp /etc/docker/daemon.json 10.0.0.18:/etc/docker/</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# systemctl restart docker.service</span><br><span class="line">    </span><br><span class="line">    3、 登录harbor测试是否可以登录，账号admin</span><br><span class="line">    - 然后开始安装docker，软连接报错没事</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# ./ezctl setup k8s-01 03</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# docker login 10.0.0.81</span><br><span class="line"></span><br><span class="line"># 添加master</span><br><span class="line"></span><br><span class="line">    master启动之后 负载均衡就可以访问了</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# ./ezctl setup k8s-01 04</span><br><span class="line">    </span><br><span class="line">    - 起来之后就可以访问验证kubectl命令是否可以用，查看状态  Ready 是因为mmaster不运行容器，所以调度关掉了</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# kubectl get node</span><br><span class="line">    NAME        STATUS                     ROLES    AGE    VERSION</span><br><span class="line">    10.0.0.18   Ready,SchedulingDisabled   master   111s   v1.21.0</span><br><span class="line">    10.0.0.28   Ready,SchedulingDisabled   master   112s   v1.21.0</span><br><span class="line">    10.0.0.38   Ready,SchedulingDisabled   master   112s   v1.21.0</span><br><span class="line"></span><br><span class="line"># 添加node</span><br><span class="line"></span><br><span class="line">    root@k8s-master1:/etc/kubeasz# ./ezctl setup k8s-01 05</span><br><span class="line">    这个文件会像nginx一样动态生成，监听在我们本机的6443端口</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# cat roles/ex-lb/templates/l4lb.conf.j2</span><br><span class="line">    root@k8s-node1:~# cat /etc/kube-lb/conf/kube-lb.conf</span><br><span class="line">        upstream backend &#123;</span><br><span class="line">            server 10.0.0.18:6443    max_fails=2 fail_timeout=3s;</span><br><span class="line">            server 10.0.0.28:6443    max_fails=2 fail_timeout=3s;</span><br><span class="line">            server 10.0.0.38:6443    max_fails=2 fail_timeout=3s;</span><br><span class="line">    </span><br><span class="line">    这个时候就可以访问node节点了</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# kubectl get node</span><br><span class="line">    NAME        STATUS                     ROLES    AGE   VERSION</span><br><span class="line">    10.0.0.18   Ready,SchedulingDisabled   master   14h   v1.21.0</span><br><span class="line">    10.0.0.28   Ready,SchedulingDisabled   master   14h   v1.21.0</span><br><span class="line">    10.0.0.38   Ready,SchedulingDisabled   master   14h   v1.21.0</span><br><span class="line">    10.0.0.48   Ready                      node     14h   v1.21.0</span><br><span class="line">    10.0.0.58   Ready                      node     14h   v1.21.0</span><br><span class="line">    10.0.0.68   Ready                      node     14h   v1.21.0</span><br><span class="line">    </span><br><span class="line">    - kubelet的service文件路径</span><br><span class="line">    cat /etc/systemd/system/kubelet.service</span><br><span class="line"></span><br><span class="line"># 部署网络组件calico</span><br><span class="line"></span><br><span class="line">    网络组件一定要定义好，生产环境一旦更改是无法更改的，除非迁移</span><br><span class="line">    查看他们的镜像是在哪儿下载的，服务器需要上外网 ，不然还需要提前传</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# cat playbooks/06.network.yml</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# vim /etc/docker/daemon.json</span><br><span class="line">      &quot;data-root&quot;: &quot;/var/lib/docker&quot;,</span><br><span class="line">      &quot;registry-mirrors&quot;: [&quot;https://99162low.mirror.aliyuncs.com&quot;], #添加阿里云的源，提高下载速度</span><br><span class="line">    - node节点手动下载镜像，也可以把master的镜像上传   node本地下载</span><br><span class="line">    #Master修改镜像</span><br><span class="line">    docker tag calico/node:v3.15.3 10.0.0.81/baseimages/calico-node:v3.15.3</span><br><span class="line">    docker tag calico/pod2daemon-flexvol:v3.15.3 10.0.0.81/baseimages/pod2daemon-flexvol:v3.15.3</span><br><span class="line">    docker tag calico/cni:v3.15.3 10.0.0.81/baseimages/calico-cni:v3.15.3</span><br><span class="line">    docker tag calico/kube-controllers:v3.15.3 10.0.0.81/baseimages/kube-controllers:v3.15.3</span><br><span class="line">    docker push 10.0.0.81/m44/calico-node:v3.15.3</span><br><span class="line">    docker login 10.0.0.81</span><br><span class="line">    #上传仓库</span><br><span class="line">    docker push 10.0.0.81/m44/calico-node:v3.15.3</span><br><span class="line">    docker push 10.0.0.81/m44/pod2daemon-flexvol:v3.15.3</span><br><span class="line">    docker push 10.0.0.81/m44/calico-cni:v3.15.3</span><br><span class="line">    docker push 10.0.0.81/m44/kube-controllers:v3.15.3</span><br><span class="line">    </span><br><span class="line">    - 把maser的calico修改为本地镜像，这样在node节点下载就会很快</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# vim roles/calico/templates/calico-v3.15.yaml.j2</span><br><span class="line">              image: 10.0.0.81/m44/kube-controllers:v3.15.3</span><br><span class="line">              image: 10.0.0.81/m44/calico-cni:v3.15.3</span><br><span class="line">              image: 10.0.0.81/m44/pod2daemon-flexvol:v3.15.3</span><br><span class="line">              image: 10.0.0.81/m44/calico-node:v3.15.3</span><br><span class="line">    </span><br><span class="line">    - 如果部署calico网络不通需要查看网段是否和本机地址一致</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# cat clusters/k8s-01/hosts&#x27;grep CLUSTER_CIDR</span><br><span class="line">    CLUSTER_CIDR=&quot;10.200.0.0/16&quot;</span><br><span class="line">    </span><br><span class="line">    - 开始部署calico</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# ./ezctl setup k8s-01 06</span><br><span class="line">    </span><br><span class="line">    - 部署完成之测试</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# kubectl get node</span><br><span class="line">    NAME        STATUS                     ROLES    AGE   VERSION</span><br><span class="line">    10.0.0.18   Ready,SchedulingDisabled   master   21m   v1.21.0</span><br><span class="line">    10.0.0.28   Ready,SchedulingDisabled   master   21m   v1.21.0</span><br><span class="line">    10.0.0.38   Ready,SchedulingDisabled   master   21m   v1.21.0</span><br><span class="line">    10.0.0.48   Ready                      node     17m   v1.21.0</span><br><span class="line">    10.0.0.58   Ready                      node     17m   v1.21.0</span><br><span class="line">    root@k8s-master1:/etc/kubeasz# calicoctl node status</span><br><span class="line">     #查看网络状态，这个时候node节点是互联状态（状态是 Established）</span><br><span class="line">    Calico process is running.</span><br><span class="line">    </span><br><span class="line">    IPv4 BGP status</span><br><span class="line">    +--------------+-------------------+-------+----------+-------------+</span><br><span class="line">    &#x27; PEER ADDRESS &#x27;     PEER TYPE     &#x27; STATE &#x27;  SINCE   &#x27;    INFO     &#x27;</span><br><span class="line">    +--------------+-------------------+-------+----------+-------------+</span><br><span class="line">    &#x27; 10.0.0.48    &#x27; node-to-node mesh &#x27; up    &#x27; 16:29:45 &#x27; Established &#x27;</span><br><span class="line">    &#x27; 10.0.0.58    &#x27; node-to-node mesh &#x27; up    &#x27; 16:29:48 &#x27; Established &#x27;</span><br><span class="line">    &#x27; 10.0.0.28    &#x27; node-to-node mesh &#x27; up    &#x27; 16:29:50 &#x27; Established &#x27;</span><br><span class="line">    &#x27; 10.0.0.38    &#x27; node-to-node mesh &#x27; up    &#x27; 16:29:50 &#x27; Established &#x27;</span><br><span class="line">    +--------------+-------------------+-------+----------+-------------+</span><br><span class="line">    </span><br><span class="line">    IPv6 BGP status</span><br><span class="line">    No IPv6 peers found.</span><br><span class="line">    </span><br><span class="line">    #创建容器测试网络是否正常</span><br><span class="line">    kubectl run net-test1 --image=alpine sleep 360000</span><br><span class="line">    # 状态正常就可以 （NODE 查看调度在那台服务器上）</span><br><span class="line">    kubectl get pod -o wide </span><br><span class="line">    </span><br><span class="line">    # 进入容器查看网络是否正常 (容器网段就是指定的10.200 网段)</span><br><span class="line">    kubectl exec -it net-test1 sh</span><br><span class="line">    / # ping （另外一个启动容器的IP 是否可以通讯）</span><br><span class="line"></span><br><span class="line">*   **这个时候我们的k8s集群已经部署完成！如果calico网络插件出现轮训启动失败，可以参照之前文章Trojan代理去下载镜像</span><br><span class="line">本人就踩过这样的坑，安装3遍都是calico无法启动，辗转反侧，彻夜难眠终于找到了这个好用的代理，下载速度贼快！！**</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用Trojan代理配置</title>
      <link href="/2021/12/28/Linux%E4%BD%BF%E7%94%A8Trojan%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/12/28/Linux%E4%BD%BF%E7%94%A8Trojan%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>此教程使用的是 Centos7 x86_64系统，ubuntu 1804 系统都可使用</p><h2 id="开启Trojan客户端代理服务"><a href="#开启Trojan客户端代理服务" class="headerlink" title="开启Trojan客户端代理服务"></a>开启Trojan客户端代理服务</h2><ul><li><p>使用此命令下载Trojan客户端<br>官方版本(GitHub)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src &amp;&amp; wget https://github.com/trojan-gfw/trojan/releases/download/v1.15.1/trojan-1.15.1-linux-amd64.tar.xz</span><br></pre></td></tr></table></figure></li><li><p>解压Trojan文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf trojan-1.15.1-linux-amd64.tar.xz</span><br></pre></td></tr></table></figure></li><li><p>打开配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src/trojan</span><br></pre></td></tr></table></figure><p>vim config.json</p></li><li><p>按i进入编辑模式,可以全部删除，复制我已经写好的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost trojan]<span class="comment"># cat config.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;run_type&quot;</span>: <span class="string">&quot;client&quot;</span>,</span><br><span class="line"><span class="string">&quot;local_addr&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;local_port&quot;</span>: 1080,</span><br><span class="line"><span class="string">&quot;remote_addr&quot;</span>: <span class="string">&quot;vpn.xxxx.cn&quot;</span>,</span><br><span class="line"><span class="string">&quot;remote_port&quot;</span>: 443,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;xxxxxxx&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;log_level&quot;</span>: 1,</span><br><span class="line"><span class="string">&quot;ssl&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;verify&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;verify_hostname&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;cert&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;/path/to/private.key&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key_password&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cipher&quot;</span>: <span class="string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cipher_tls13&quot;</span>: <span class="string">&quot;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prefer_server_cipher&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;alpn&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;http/1.1&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;alpn_port_override&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;h2&quot;</span>: 81</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;reuse_session&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;session_ticket&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;session_timeout&quot;</span>: 600,</span><br><span class="line">    <span class="string">&quot;plain_http_response&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;curves&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dhparam&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;tcp&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prefer_ipv4&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;no_delay&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;keep_alive&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;reuse_port&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;fast_open_qlen&quot;</span>: 20</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;mysql&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;server_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server_port&quot;</span>: 3306,</span><br><span class="line">    <span class="string">&quot;database&quot;</span>: <span class="string">&quot;trojan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;trojan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cafile&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    run_type 修改为 <span class="string">&quot;client&quot;</span></span><br><span class="line">    local_port 修改为 1080</span><br><span class="line">    remote_addr 修改为 vpn.xxx.cn</span><br><span class="line">    remote_port 修改为 443</span><br><span class="line">password 修改为 [<span class="string">&quot;123456&quot;</span>] trojan服务端验证密码</span><br><span class="line">    </span><br><span class="line">    ssl中的 verify 值修改为 <span class="literal">false</span> （如果配置文件中没有，则添加这个配置）</span><br><span class="line">    ssl中的 verify_hostname 值修改为 <span class="literal">false</span> （如果配置文件中没有，则添加这个配置）</span><br><span class="line">    ssl中的 cert 修改为 <span class="string">&quot;&quot;</span> （改成空的）</span><br><span class="line"></span><br><span class="line">    * 示例如下</span><br><span class="line">    </span><br><span class="line">      <span class="string">&quot;ssl&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;verify&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="string">&quot;verify_hostname&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="string">&quot;cert&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置-trojan-service"><a href="#配置-trojan-service" class="headerlink" title="配置 trojan service"></a>配置 trojan service</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/trojan.service &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=trojan</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=simple</span></span><br><span class="line"><span class="string">PIDFile=/usr/src/trojan/trojan.pid</span></span><br><span class="line"><span class="string">ExecStart=/usr/src/trojan/trojan -c /usr/src/trojan/config.json -l /usr/src/trojan/trojan.log</span></span><br><span class="line"><span class="string">ExecReload=/bin/kill -HUP \$MAINPID</span></span><br><span class="line"><span class="string">Restart=on-failure</span></span><br><span class="line"><span class="string">RestartSec=1s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="启动Trojan"><a href="#启动Trojan" class="headerlink" title="启动Trojan"></a>启动Trojan</h2><pre><code>systemctl start trojansystemctl enable --now trojan</code></pre><ul><li><p>检查是否启动成功</p><p>ps aux ‘ grep trojan ‘ grep -v grep</p><ul><li><p>看到有类似 &#x2F;usr&#x2F;src&#x2F;trojan&#x2F;trojan 的内容展示，即表示trojan正在运行</p></li><li><p>如果未启动成功，通过这个命令查看日志：    cat &#x2F;usr&#x2F;src&#x2F;trojan&#x2F;trojan.log</p></li></ul><p>还可以执行 curl ip.sb –socks5 127.0.0.1:1080, 查看结果是否为Trojan代理的IP</p></li></ul><h2 id="命令行使用代理"><a href="#命令行使用代理" class="headerlink" title="命令行使用代理"></a>命令行使用代理</h2><p>安装privoxy<br>Linux貌似默认不支持直接使用socks代理,使用privoxy将socks5转换为http代理</p><pre><code>yum install -y privoxy</code></pre><p>配置privoxy</p><pre><code>vim /etc/privoxy/config# 末尾增加下面内容,/后面是代理服务器的地址:端口,注意最后还有个.forward-socks5t / 127.0.0.1:1080 .</code></pre><p>启动服务</p><pre><code>systemctl start privoxy &amp;&amp; systemctl enable privoxy</code></pre><p>设置一下系统代理变量</p><pre><code>export https_proxy=http://127.0.0.1:8118export http_proxy=http://127.0.0.1:8118export all_proxy=http://127.0.0.1:8118</code></pre><p>注:8118是privoxy默认使用的端口</p><p>测试一下</p><pre><code>curl ipfconfig.io</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK集群搭建（ubuntu）</title>
      <link href="/2021/12/04/ELK%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88ubuntu%EF%BC%89/"/>
      <url>/2021/12/04/ELK%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88ubuntu%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-ELK-（Elastic-SYACK）"><a href="#什么是-ELK-（Elastic-SYACK）" class="headerlink" title="什么是 ELK （Elastic SYACK）?"></a>什么是 ELK （Elastic SYACK）?</h3><ul><li><p>elk  是三个开源软件组成的一个组合体，是elastic公司研发的一套完成的日志收集分析和展示的企业级解决方案。每个软件用于完成不同的功能。它具有很强的数据搜索功能，每次查询都是实时查询,当然elasticsearch也是最占用服务器资源的搜索引擎，所以生产环境服务器配置要好些<br>ELK 又称为 ELK stack，官方域名为 <code>elastic.co</code></p><p>E代表 elasticsearch ,L 代表（logstash），K 代表（kibana），用户开始用于日志搜索，并且希望可以对日志进行可视化。所以引用了强大的采集管道(Logstash)和灵活的可视化工具Kibana”下面会讲解三个组件的关系</p></li></ul><p><strong>elasticsearch简介</strong></p><blockquote><ol><li>支持全文搜索、当日志收集到es之后就可以按照业务名称去创建index（索引），然后我们就可以进行全文搜索，而且速度很快，会直接返回结果</li><li>拥有强大的API功能支持json数据，可以大规模收集日志数据，比如Nginx，Tomcat等等。而且还会把搜索名称进行拆分 - 如淘宝搜索一件商品只需要搜索关键字就可以弹出</li><li>另外Elasticsearch和Logstsh还支持灵活扩展，扩容很快，我们只需要重启一下服务的进程就可以添加至集群</li></ol></blockquote><p><strong>Logstash简介</strong></p><blockquote><ol><li>logstash 用来接收web服务的数据，他是依赖于java的，所以服务器性能要求较高。当然后期还加入了Beats等等轻量级工具，是GO写的是一个轻量级的收集日志工具，可以代替Logstash</li><li>logstash具有实时收集日志和传输数据的能力。实现日志转发，日志过滤，支持普通日志或者自定义日志json日志的解析，最终发送给Elasticsearch</li></ol></blockquote><p><strong>Kibana简介</strong></p><blockquote><ol><li>kibana为elastarch提供了可查看数据的web界面，通过elasticsearch的API的数据取查找，并在web界面展现。</li><li>Kibana的前段操作也比较绚丽，支持绘图等功能， 而且操作也简单。</li><li>可以统一在一台机器上查看日志，可以快速的定位排错。</li></ol></blockquote><h3 id="elasticsearch安装"><a href="#elasticsearch安装" class="headerlink" title="elasticsearch安装"></a>elasticsearch安装</h3><ul><li>规划使用三台es来搭建集群，以保障我们服务的可用性<br>官网，有自带的jdk环境安装包 ，有些需要自己安装jdk<br><code>https://artifacts.elastic.co/downloads/</code><br>jdk建议安装11版本，具体查看官方文档,不同的es版本jdk要求不同<br><code>https://www.elastic.co/cn/support/matrix#matrix_jvm</code></li></ul><p><strong>1</strong>   三台机器同时操作下载安装包，并创建挂载点挂载</p><pre><code>root@es1:~# wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.13.2-amd64.debroot@es1:~# mkdir /data/esdata/ -p- 为elastic search专门添加一块数据盘存储数据root@es1:~#mkfs.ext4 /dev/sdbroot@es1:~#mount /dev/sdb /data/esdataroot@es1:~#echo &quot;/data/sdb /data/esdata ext4 defaults 0 0&quot; &gt;&gt;/etc/fstabroot@es1:mount -a</code></pre><p><strong>2</strong> 开始安装elasticsearch,版本是7.13.2，es会自动创建用户和组，所以启动一定要用es用户。es会选举出一个master作为管理者（进行分片管理）</p><pre><code>root@es1:~# dpkg -i /usr/local/src/elasticsearch-7.13.2-amd64.deb- 修改es配置文件,并且详细介绍root@es1:~# vim /etc/elasticsearch/elasticsearch.ymlcluster.name: yhtzjy// 集群名称  三台机器名称必须一样才可以组件集群node.name: node1// 在同一个集群内三个机器名字都必须不同path.data: /data/esdata/elasticsearchpath.logs: /data/esdata/logs//数据路径和日志路径,目录会自动创建#bootstrap.memory_lock: true//宿主机的情况下内存较大可以开启，还需要指定service文件network.host: 10.0.0.81//网络监听地址，本机IP就可以http.port: 9200//端口号discovery.seed_hosts: [&quot;10.0.0.81&quot;, &quot;10.0.0.82&quot;, &quot;10.0.0.83&quot;]// 集群列表，三台都写上，他们之间会像radis一样进行心跳检测cluster.initial_master_nodes: [&quot;10.0.0.81&quot;, &quot;10.0.0.82&quot;, &quot;10.0.0.83&quot;]// 如果master主机挂了那些主机可以选举为masteraction.destructive_requires_name: true// 当我们通过API删除数据的时候是否可以通过正则删除，默认是true不能使用正则。必须精确索引全称</code></pre><p><strong>3</strong> 启动elastic search,三台一样操作，启动成功之后web就可以访问9200端口,会显示我们的集群状态</p><pre><code>root@es1:~# chown elasticsearch:elasticsearch /data/esdata/ -Rroot@es1:~# systemctl restart elasticsearch.serviceroot@es1:~# curl http://10.0.0.81:9200/</code></pre><h3 id="修改es的内存限制"><a href="#修改es的内存限制" class="headerlink" title="修改es的内存限制"></a>修改es的内存限制</h3><p>如果宿主机配置较高可以加大对es的内存限制，官方文档<br><code>https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html</code></p><pre><code>root@es1:~# vim /etc/elasticsearch/jvm.options-Xms2g-Xms2g//内存设置多大合适？ 官方建议16G （建议物理内存的一半）// 这个时候可能无法启动  ，是因为service文件需要指定参数,设置无限内存root@es1:~# vim /usr/lib/systemd/system/elasticsearch.serviceLimitMEMLOCK=infinityroot@es1:~# systemctl daemon-reloadroot@es1:~# systemctl restart elasticsearch.service//如果报错就看下日志root@es1:~# tail -100 /var/log/syslog &#39;grep -i error</code></pre><h3 id="elasticsearch插件之Head"><a href="#elasticsearch插件之Head" class="headerlink" title="elasticsearch插件之Head"></a>elasticsearch插件之Head</h3><ul><li>在google的在线商店搜索elasticsearch就会出现Google网址,早期是容器跑的，或者需要在linux下载，现在安装比较方便，可以直接添加</li><li><strong>所有的插件主要功能就是管理我们es上面的index 下载地址</strong><br><code>https://chrome.google.com/webstore/search/elasticsearch</code></li><li>点击heed插件，输入es的IP地址就可以查看</li></ul><h3 id="elasticsearch中Master和slave的区别"><a href="#elasticsearch中Master和slave的区别" class="headerlink" title="elasticsearch中Master和slave的区别"></a>elasticsearch中Master和slave的区别</h3><blockquote><p>Master：统计node节点状态信息（是否存活）、索引的创建和删除、索引的分配管理、可以在head插件直接关闭node节点等等。<br>Slave：同步Master的数据，等待机会成为Master</p></blockquote><h3 id="elasticsearch插件之cerebro"><a href="#elasticsearch插件之cerebro" class="headerlink" title="elasticsearch插件之cerebro"></a>elasticsearch插件之cerebro</h3><ul><li><p>cerebro的功能比head插件功能更为强大，但是安装稍麻烦些，他依赖于java环境</p></li><li><p>主要功能是用于测试创建一个index是否正常等，偏向于管理（测试数据是否正常）<br><strong>安装：单独在找一台服务器安装,cerebro的端口号是9000</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@web1:~<span class="comment"># apt-get update &amp;&amp; apt install openjdk-11-jdk</span></span><br><span class="line">root@web1:~<span class="comment"># wget https://github.com/lmenezes/cerebro/releases/download/v0.9.4/cerebro_0.9.4_all.deb</span></span><br><span class="line">root@web1:~<span class="comment"># dpkg -i /usr/local/src/cerebro_0.9.4_all.deb</span></span><br><span class="line">//修改配置文件，最下面写其中一台elacticsearch地址</span><br><span class="line">root@web1:~<span class="comment"># vim /etc/cerebro/application.conf</span></span><br><span class="line">host = <span class="string">&quot;http://10.0.0.81:9200&quot;</span></span><br><span class="line">name = <span class="string">&quot;yhtzjy-m44-cluster&quot;</span></span><br><span class="line">headers-whitelist = [ <span class="string">&quot;x-proxy-user&quot;</span>, <span class="string">&quot;x-proxy-roles&quot;</span>, <span class="string">&quot;X-Forwarded-For&quot;</span> ]</span><br><span class="line">//其中 name指定elasticsearch的集群名称，这样每次cereborweb界面直接点击集群名称就可以进入管理界面</span><br><span class="line">root@web1:~<span class="comment"># vim /lib/systemd/system/cerebro.service</span></span><br><span class="line">//用户修改成为root，然后注释下面四行才可以启动</span><br><span class="line">root@web1:~<span class="comment"># systemctl restart cerebro.service &amp;&amp; systemctl enable --now cerebro.service</span></span><br><span class="line">root@web1:~<span class="comment"># ss -ntl &#x27;grep 9000</span></span><br><span class="line">root@es3:~<span class="comment"># curl http://10.0.0.84:9000/ &amp;&gt;/dev/null &amp;&amp; echo $?</span></span><br></pre></td></tr></table></figure></li><li><p>启动成功之后web访问IP+9000端口就可以访问</p></li></ul><h3 id="cerebor的使用"><a href="#cerebor的使用" class="headerlink" title="cerebor的使用"></a>cerebor的使用</h3><ul><li>More-cat apis<br>&#x2F;&#x2F;鼠标点击more，选择cat apis,在选择health（生命值），然后就可以看到们集群的状态（三种颜色代表集群的不同状态）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux磁盘在线扩容</title>
      <link href="/2021/12/02/linux%E7%A3%81%E7%9B%98%E5%9C%A8%E7%BA%BF%E6%89%A9%E5%AE%B9/"/>
      <url>/2021/12/02/linux%E7%A3%81%E7%9B%98%E5%9C%A8%E7%BA%BF%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="ext4文件系统扩容"><a href="#ext4文件系统扩容" class="headerlink" title="ext4文件系统扩容"></a>ext4文件系统扩容</h2><p>先在新服务器上面扫描磁盘，不然无法显示新的磁盘，下面是两种扫描方式，选任意一种就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#方法1</span><br><span class="line">for i in &#123;1..9&#125;;do echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host$i/scan;done</span><br><span class="line">#方法2，下载sg3-utils,然后执行rescan-scsi-bus.sh -a 就可以扫描本机所有磁盘</span><br><span class="line">apt install sg3-utils</span><br><span class="line">rescan-scsi-bus.sh -a</span><br><span class="line">这个时候就可以查看宿主机磁盘是否添加成功，可以看到sda总容量是500G</span><br><span class="line">root@cootekubuntu:~# fdisk -l &#x27;grep /dev/sd</span><br><span class="line">Disk /dev/sda: 500 GiB, 53687091200 bytes, 104857600 sectors</span><br><span class="line">/dev/sda1   2048     4095     2048   1M BIOS boot</span><br><span class="line">/dev/sda2   4096 20975615 20971520  10G Linux filesystem</span><br></pre></td></tr></table></figure><h4 id="步骤一：做好备份"><a href="#步骤一：做好备份" class="headerlink" title="步骤一：做好备份"></a>步骤一：做好备份</h4><ul><li><p>如果是较为重要的数据最好提前做好备份，ECS服务器的话做个快照</p><ol><li><p>登录ECS管理控制台。</p></li><li><p>在左侧导航栏，选择实例与镜像 &gt; 实例。</p></li><li><p>在顶部菜单栏左上角处，选择地域。</p></li><li><p>找到需要扩容云盘的实例，单击实例ID。</p></li><li><p>在实例详情页，单击云盘页签。</p></li><li><p>找到需要扩容的云盘，在操作列单击创建快照。</p></li><li><p>在弹出的对话框中，输入快照名称，并按需绑定标签后，单击创建。</p></li><li><p>单击快照页签，查看已创建的快照。</p></li><li><p>当快照的进度为100%时，表示快照创建完成，您可以执行后续操作</p></li></ol><h4 id="步骤二：在控制台扩容云盘容量"><a href="#步骤二：在控制台扩容云盘容量" class="headerlink" title="步骤二：在控制台扩容云盘容量"></a>步骤二：在控制台扩容云盘容量</h4><p>1、 在实例详情页，单击云盘页签。<br>2、选择需要扩容的云盘，在操作列单击更多 &gt; 云盘扩容。 如果需要批量扩容多个云盘，请使用阿里云账号在存储与快照 &gt; 云盘页面选择多个云盘后，单击底部的云盘扩容。挂载在同一ECS实例下的云盘不支持批量扩容功能。</p></li></ul><p>3、在磁盘扩容页面，选中在线扩容，并设置扩容后容量。设置的扩容后容量不允许小于当前容量。</p><p> <img src="https://oss.yhtzjy.com/picture/p135832.png" alt="img"> </p><pre><code>#### 步骤三：扩容分区先查看文件系统大小  df -TH (其中，Mounted on列为文件系统对应的挂载点。)</code></pre><ul><li><p>扩容分区</p><p>#如果您的分区为GPT格式，必须执行此步骤；如果您的分区为MBR格式，请跳过此步骤。<br>yum install gdisk -y<br>#Debian 8及以上版本、Ubuntu14及以上版本运行以下命令。此示例以扩容系统盘为例，&#x2F;dev&#x2F;vda和1之间需要空格分隔。如果需要扩容其他分区，请根据实际情况修改命令。<br>apt-get update &amp;&amp; apt-get install -y cloud-guest-utils<br>#运行以下命令扩容分区。<br>growpart &#x2F;dev&#x2F;vda 1</p><h4 id="步骤四：扩容文件系统"><a href="#步骤四：扩容文件系统" class="headerlink" title="步骤四：扩容文件系统"></a>步骤四：扩容文件系统</h4><p>扩容ext*（例如ext4）文件系统：运行以下命令扩容文件系统。&#x2F;dev&#x2F;vda根据实际情况修改。</p><pre><code>resize2fs /dev/sda2</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">扩容xfs文件系统：运行以下命令扩容数据盘/dev/vdc1的文件系统。</span><br><span class="line">​```shell</span><br><span class="line">xfs_growfs /media/vdc</span><br><span class="line"></span><br><span class="line">扩容btrfs文件系统：如果您的数据盘文件系统为btrfs，则需要运行以下命令扩容文件系统。</span><br><span class="line"></span><br><span class="line">    btrfs filesystem resize max /mountpoint</span><br><span class="line"></span><br><span class="line">最后再运行 df -TH 检测文件是否扩容成功</span><br></pre></td></tr></table></figure></li><li><p>如果扩容成功，ECS实例中的业务程序能够正常运行，则完成操作。</p></li><li><p>如果扩容失败，则通过备份的快照回滚数据</p></li></ul><p>具体详情到以下网址参考</p><pre><code>https://help.aliyun.com/document_detail/113316.htm?spm=a2c4g.11186623.0.0.53f36ee1yIaSAE#section-cqo-5zn-ine</code></pre><h2 id="lvm-xfs文件系统扩容参考"><a href="#lvm-xfs文件系统扩容参考" class="headerlink" title="lvm_xfs文件系统扩容参考"></a>lvm_xfs文件系统扩容参考</h2><pre><code>  要建立LVM，首先需要为LVM准备磁盘或者分区。如果使用磁盘分区作为物理卷的话，需要将分区标识为&quot;Linux LVM&quot;，其分区ID为&quot;0x8e&quot;，接下来我为大家演示一下配置的过程和分区的在线扩容。 1、添加磁盘，进入linux服务器使用fdisk -l 可以显示总容量2、查看系统盘的分区类型然后分区，最后记得输入q不保存退出，w保存fdisk /dev/sdbCommand (m for help): t   //变更分区的类型Hex code (type L to list all codes): 8e    //输入8e即&quot;Linux LVM&quot;w保存退出3、刚分的区不生效使用  partprobe立即生效，如果没有就下载，然后执行（partprobe）ll /dev/sdb1 查看刚才的分区是否生效4、 让新添加的硬盘分区支持LVM技术[root@linuxprobe ~]# pvcreate /dev/sdb1  Physical volume &quot;/dev/sdb1&quot; successfully created5、 查看当前系统的卷组，并将/dev/sdb1硬盘分区加入到卷组中[root@linuxprobe ~]# vgdisplay   --- Volume group ---  VG Name               rhel    //卷组名为&quot;rhel&quot;  VG Size               19.51 GiB     //卷组的总容量大小[root@linuxprobe ~]# vgextend rhel /dev/sdb1         //把/dev/sdb1硬盘分区加入到rhel卷组中      Volume group &quot;rhel&quot; successfully extended[root@linuxprobe ~]# vgdisplay     VG Size               29.50 GiB      //卷组的容量增大了10GB   Free  PE / Size       2559 / 10.00 GiB      //记住空闲PE的数量，后面需要用到6、查看逻辑卷的详细信息[root@linuxprobe ~]# lvdisplay   LV Path                /dev/rhel/root   //该逻辑卷实际就是Linux系统盘，我们将对它进行扩容  LV Name                root     //逻辑卷名为root  LV Size                17.51 GiB   //逻辑卷的大小，即系统盘大小7、对root逻辑卷进行扩容操作[root@linuxprobe ~]# lvextend -L +10G /dev/rhel/root      Extending logical volume root to 27.51 GiB  Insufficient free space: 2560 extents needed, but only 2559 available   //显示实际空闲容量不足10GB，比10GB稍微小一点点[root@linuxprobe ~]# lvextend -l +2559 /dev/rhel/root    //这里改用 -l参数 进行扩容  Extending logical volume root to 27.50 GiB  Logical volume root successfully resized8、重置root逻辑卷的大小、先查看分区是gpt还是MBRfdisk -l&#39;grep type  &amp;&amp; df -TH[root@OAserverBAK ~]# xfs_growfs /dev/ol/home$然后再使用df -TH 查看文件系统大小，这个时候就可以看到扩容已经完成</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh使用私钥文件去做免密认证</title>
      <link href="/2021/12/02/ssh%E4%BD%BF%E7%94%A8%E7%A7%81%E9%92%A5%E6%96%87%E4%BB%B6%E5%8E%BB%E5%81%9A%E5%85%8D%E5%AF%86%E8%AE%A4%E8%AF%81/"/>
      <url>/2021/12/02/ssh%E4%BD%BF%E7%94%A8%E7%A7%81%E9%92%A5%E6%96%87%E4%BB%B6%E5%8E%BB%E5%81%9A%E5%85%8D%E5%AF%86%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="批量添加密钥"><a href="#批量添加密钥" class="headerlink" title="批量添加密钥"></a>批量添加密钥</h1><p>关于公司连接服务器这块儿做的比较严谨，每次登录都需要指定私钥文件连接<br><code>ssh -i &quot;aws2lin27.pem&quot; ubuntu@ec2-34-216-139-32.us-west-2.compute.amazonaws.com</code><br>这样连接，登录起来非常麻烦  ，后来就想到做免密认证后期使用ansible批量部署就非常简单<br>下面是写的脚本，大概逻辑是先需要把所有需要认证的服务器pem 私钥文件拷贝到本机想做免密的服务器，然后批量把自己的私钥拷贝到对方指定用户里，这样就实现不输入密码登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost pem]<span class="comment"># cat fix_pem.sh </span></span><br><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">ec_num=`<span class="built_in">cat</span> aws.list <span class="string">&#x27; wc -l`</span></span><br><span class="line"><span class="string">for i in `seq 1 $ec_num`;</span></span><br><span class="line"><span class="string">do</span></span><br><span class="line"><span class="string">   key_path=`cat aws.list &#x27;</span> awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> <span class="string">&#x27;sed -n &quot;$i&quot;p`</span></span><br><span class="line"><span class="string">   aws_ip=`cat aws.list &#x27;</span> awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="string">&#x27;sed -n &quot;$i&quot;p`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   timeout -s 2 5 /usr/bin/scp  -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $key_path  /home/hongtao.yang/aws/pem/add_pub_key.sh ubuntu@$aws_ip:/home/ubuntu/add_pub_key.sh</span></span><br><span class="line"><span class="string">   if [ $? -ne 0 ];then </span></span><br><span class="line"><span class="string">       echo $aws_ip &gt;&gt;/home/hongtao.yang/aws/pem/AWS_no.log</span></span><br><span class="line"><span class="string">       continue</span></span><br><span class="line"><span class="string">   fi</span></span><br><span class="line"><span class="string">   /usr/bin/ssh  -o &quot;StrictHostKeyChecking no&quot; -o &quot;LogLevel=quiet&quot; -i $key_path ubuntu@$aws_ip &quot;sudo /bin/bash /home/ubuntu/add_pub_key.sh&quot;   </span></span><br><span class="line"><span class="string">   echo $aws_ip &gt;&gt;/home/hongtao.yang/aws/pem/AWS_yes.log</span></span><br><span class="line"><span class="string">done</span></span><br></pre></td></tr></table></figure><p>这个时候需要在写一个引用脚本，把主机把本机的私钥传输进对方的.ssh&#x2F;authorized_keys这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost pem]<span class="comment"># cat add_pub_key.sh </span></span><br><span class="line"><span class="comment"># /root/add_pub_key.sh</span></span><br><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">sudo -s &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">echo &quot;ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAsHbvdNQlt/VCtQ+pa0I21Foc13EbdQqh2Fqf3orJIJV8dbWPhUBYsCoRu4ymTzJrtGiEYKmFVbmL9BxHBf7js/mQM08t4ySzU6agplzxQ/ae1bmwyjPrUVuSCnG5KEolhosKuAo/SmA0lrFu7IjiPU6ZfD/KndP5H/S9q7hWJ4TgRJGbft6zzD/oU5IIZ/hlrB77A7eN7Znr3Izwy11uM8I2aWZacAjaKACS6AkeY+mQsGuDBtRshE1PWIO/PRB+6ZyLXO6blloDfsdz1DHbeSvfnnlfCZxQ2Tu9jQ0Hm7KhaTPSnCTORgvTBCpW0XdTj/kJAXfwzq7uXHvopQ/YHt==&quot; &gt;&gt;/root/.ssh/authorized_keys</span></span><br><span class="line"><span class="string">sed -i &#x27;s/PermitRootLogin no/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config</span></span><br><span class="line"><span class="string">sed -i &#x27;s/PasswordAuthentication yes/PasswordAuthentication no/g&#x27; /etc/ssh/sshd_config</span></span><br><span class="line"><span class="string">service ssh restart</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>本机路径一定要正确，以及先用ssh连接一下是否可以连接，脚本会对其进行判断 ，如果超过5秒就自动把无法连接的IP放在AWS_no.log这个文件里去 ，会把私钥拷贝成功的主机IP放在AWS_yes.log这个文件当中</p><pre><code>这个文件需要提前自己手动完成，因为每个主机对应的私钥文件都不相同[root@localhost pem]# cat aws.list 54.200.50.103   /home/hongtao.yang/aws/pem/aws2lin69.pem54.191.200.178  /home/hongtao.yang/aws/pem/aws2lin89.pem52.89.78.38     /home/hongtao.yang/aws/pem/aws2lin92.pem52.40.194.165   /home/hongtao.yang/aws/pem/aws2lin90.pem52.35.93.17     /home/hongtao.yang/aws/pem/aws2lin70.pem52.13.97.21     /home/hongtao.yang/aws/pem/aws2lin49.pem44.236.240.155  /home/hongtao.yang/aws/pem/aws2lin91.pem44.235.22.84    /home/hongtao.yang/aws/pem/aws2lin75.pem44.231.47.122   /home/hongtao.yang/aws/pem/aws2lin79.pem</code></pre><h3 id="做完免密遇到的坑"><a href="#做完免密遇到的坑" class="headerlink" title="做完免密遇到的坑"></a>做完免密遇到的坑</h3><h3 id="方案一"><a href="#方案一" class="headerlink" title="- 方案一"></a>- 方案一</h3><p>由于之前我对私钥设置了密码，所以就算免密成功之后也需要手动输入私钥密码才能连接,所以找到以下两种方案<br>1、借助第三方工具Keychain</p><pre><code>wget https://github.com/funtoo/keychain/archive/refs/heads/master.zipunzip master.zipcd keychain-master/cp keychain /usr/bin/[root@localhost pem]# vim /root/.bash_profile  把下面几行添加环境变量PATH=$PATH:$HOME/binexport PATHkeychain ~/.ssh/id_rsa. ~/.keychain/$HOSTNAME-shsource /root/.bash_profile[root@localhost pem]# ssh-add -l   这个时候就可以看到他把秘钥写入了缓存然后就可以ssh了2048 SHA256:RlCuwRVp5yzao9e/IapSJAWfHZNU8axzV/H3g3qA1Co /root/.ssh/id_rsa (RSA)</code></pre><h3 id="方案2"><a href="#方案2" class="headerlink" title="- 方案2"></a>- 方案2</h3><p>之前在Ubuntu下用SSH给私钥添加了一个密码，后来用着很麻烦。想去掉，网上查看本身就有这个功能，方法如下：<br>1 、在终端下输入ssh-keygen -p<br>2 、系统会提醒选择修改的私钥，默认是&#x2F;home&#x2F;username&#x2F;.ssh&#x2F;id_rsa<br>3 、选择好文件之后按回车，会提示输入旧密码。<br>4 、输入好之后会提示输入新的密码。<br>5 、直接回车，在提示输入新密码依然回车，此时私钥密码就会被清除。</p>]]></content>
      
      
      <categories>
          
          <category> Shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jumpserver使用docker部署</title>
      <link href="/2021/11/23/Jumpserver%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/11/23/Jumpserver%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><strong>Jumpserver 是一款使用Python, Django 开发的开源跳板机系统, 为互联网企业提供了认证，授权，审计，自动化运维等功能。我们称为跳板机（在web界面操作），类似于VPN，但是jumpserver是七层代理 VPN是四层代理，对于开发和测试我们会让他们使用jumpserver（访问nginx，mysql等服务，一般都是在浏览器上操作） jumpserver分为开源和商业两个版本，提供了认识，授权。商业堡垒机安全机制会相对高一些（可以手机收验证码，或者U顿插入才可以登录）</strong></p><pre><code>主要功能 ：需要通过这台机器跳到不同的机器1 记录所有操作会进行录像，以及可以看到谁在登录 2 对于危险的命令可以禁止执行 如：rm 、reboot 等等3 支持登录认证，LDAP认证，多因子认证。4 可以针对不同的用户给予不同的权限，可以进行资产分配，指定用户访问指定的服务器5 账号管理：集中账号管理，统一密码管理、`官方地址：http://www.jumpserver.org/</code></pre><p>Docker 就不介绍安装了，直接步入正题</p><h3 id="使用Docker安装数据库"><a href="#使用Docker安装数据库" class="headerlink" title="使用Docker安装数据库"></a>使用Docker安装数据库</h3><pre><code>root@jumpserver:~# docker pull mysql:5.6.44root@jumpserver:~# docker pull redis:4.0.14#进入容器查看配置文件，然后把容器配置文件拷贝宿主机root@jumpserver:~# docker run -it --rm mysql:5.6.44 bashroot@01af5631d811:/# ls /etc/mysql/mysql.conf.d/mysqld.cnf这个时候我们在打开一个新的窗口，要复制这个容器的ID才能把文件拷出来root@jumpserver:~# mkdir /etc/mysql/mysql.conf.d/ -proot@jumpserver:~# docker cp 01af5631d811:/etc/mysql/mysql.conf.d/mysqld.cnf /etc/mysql/mysql.conf.d/然后在MySQL配置文件最后一行添加字符集vim /etc/mysql/mysql.conf.d/mysqld.cnfcharacter-set-server=utf8- 然后把MySQL这个配置文件也拷贝到宿主机root@jumpserver:~# mkdir  /etc/mysql/conf.d/root@jumpserver:~# docker cp 01af5631d811:/etc/mysql/conf.d/mysql.cnf /etc/mysql/conf.d/接着在宿主机也添加字符集root@jumpserver:~# vim /etc/mysql/conf.d/mysql.cnf[mysql]default-character-set=utf8- 创建数据目录root@jumpserver:~# mkdir /data/mysql -p- 启动MySQL容器，刚才的一台可以退出了 docker run -it -d -p 3306:3306 -v /etc/mysql/mysql.conf.d/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf -v /etc/mysql/conf.d/mysql.cnf:/etc/mysql/conf.d/mysql.cnf -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=&quot;yhtzjy.com&quot; mysql:5.6.44- 查看MySQL是否启动成功[root@localhost ~]# docker logs -f bfe43ecb5cf2日志出现这个准备好连接代表mysql已经启动成功（mysqld: ready for connections）也可以找一台客户端测试连接 apt install mysql-client -y或者我们进入容器连接测试root@jumpserver:~# docker exec -it 326b5492d362 bashroot@326b5492d362:/# mysql -uroot -pyhtzjy.commysql&gt; show databases;在查看一下字符集是不是 UTF8mysql&gt; show variables like &quot;%character%&quot;;show variables like &quot;%collation%&quot;;没问题就创建jumpserver数据库，和授权用户mysql&gt; create database jumpserver default charset &#39;utf8&#39;;mysql&gt; grant all on jumpserver.* to &#39;jumpserver&#39;@&#39;%&#39; identified by &#39;yhtzjy.com&#39;;#这个时候我们使用客户端就可以远程连接 mysql -ujumpserver -h8.142.110.116 -pyhtzjy.commysql&gt; show databases;+--------------------+&#39; Database           &#39;+--------------------+&#39; information_schema &#39;&#39; jumpserver         &#39;+--------------------+2 rows in set (0.00 sec)</code></pre><h3 id="部署redis"><a href="#部署redis" class="headerlink" title="部署redis"></a>部署redis</h3><p>由于自带的radis没有 radis.conf文件  我们需要自己在宿主机创建目录，然后映射到容器里面</p><pre><code>root@jumpserver:~# mkdir /data/radisroot@jumpserver:~# docker run -it -p 6379:6379 -d -v /data/radis/:/data redis:4.0.14查看redis日志是否启动，或者客户端下载一个连接测试root@jumpserver:~# docker logs -f 5545c28b857d</code></pre><h3 id="官网搜索jumpserver的镜像"><a href="#官网搜索jumpserver的镜像" class="headerlink" title="官网搜索jumpserver的镜像"></a>官网搜索jumpserver的镜像</h3><pre><code>进入hub官方搜索jumpserver,然后找到这个（jumpserver/jms_all）包含所有组件的镜像https://hub.docker.com/然后点击Tags  找到1.5.9版本   个人用老版本的感觉好用，现在都是2.x版本root@jumpserver:~# docker pull jumpserver/jms_all:1.5.9</code></pre><h3 id="生成随机秘钥和初始化token给jumpserver使用"><a href="#生成随机秘钥和初始化token给jumpserver使用" class="headerlink" title="生成随机秘钥和初始化token给jumpserver使用"></a>生成随机秘钥和初始化token给jumpserver使用</h3><pre><code>#生成秘钥if [ &quot;$SECRET_KEY&quot; = &quot;&quot; ]; then SECRET_KEY=`cat /dev/urandom &#39; tr -dc A-Za-z0-9 &#39; head -c 50`; echo &quot;SECRET_KEY=$SECRET_KEY&quot; &gt;&gt; ~/.bashrc; echo $SECRET_KEY; else echo $SECRET_KEY; fi#然后复制秘钥记下来（key），然后生成token记录下来if [ &quot;$BOOTSTRAP_TOKEN&quot; = &quot;&quot; ]; then BOOTSTRAP_TOKEN=`cat /dev/urandom &#39; tr -dc A-Za-z0-9 &#39; head -c 16`; echo &quot;BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN&quot; &gt;&gt; ~/.bashrc; echo  $BOOTSTRAP_TOKEN; else echo $BOOTSTRAP_TOKEN; fi</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><ul><li><p>指定key和tocken，指定数据库地址端口，以及指定镜像</p></li><li><p>80和2222都是SSH端口，80用的是Nginx服务</p></li><li><p>&#x2F;opt&#x2F;jumpserver 是我们的数据目录包含录像等等</p></li><li><p>没有-d 是因为我们要查看一下启动日志mysql是否可以启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker run --name jms_all  \</span><br><span class="line">-v /opt/jumpserver:/opt/jumpserver/data/media \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-p 2222:2222 \</span><br><span class="line">-e SECRET_KEY=1GYc3TjwRDfV2UPXQjYvkJpG4E2K6Zl8SBZpChjBh6IjRn3r5v \</span><br><span class="line">-e BOOTSTRAP_TOKEN=hROQTd7WOn68DzEL \</span><br><span class="line">-e DB_HOST=10.0.0.72 \</span><br><span class="line">-e DB_PORT=3306 \</span><br><span class="line">-e DB_USER=<span class="string">&#x27;jumpserver&#x27;</span> \</span><br><span class="line">-e DB_PASSWORD=<span class="string">&quot;magedu.com&quot;</span> \</span><br><span class="line">-e DB_NAME=jumpserver \</span><br><span class="line">-e REDIS_HOST=10.0.0.72 \</span><br><span class="line">-e REDIS_PORT=6379 \</span><br><span class="line">-e REDIS_PASSWORD= \</span><br><span class="line">jumpserver/jms_all:1.5.9</span><br></pre></td></tr></table></figure><h2 id="登录jumpserver"><a href="#登录jumpserver" class="headerlink" title="登录jumpserver"></a>登录jumpserver</h2></li><li><p>启动成功之后就可以进入MySQL查看，只要有表就没问题,然后就直接输入IP地址登录，默认账号名和密码都是小写的 admin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mysql -ujumpserver -pyhtzjy.com -h8.142.110.116</span><br><span class="line">MySQL [(none)]&gt; use jumpserver;</span><br><span class="line">MySQL [jumpserver]&gt; show tables；</span><br></pre></td></tr></table></figure><h2 id="jumpserver登录界面介绍"><a href="#jumpserver登录界面介绍" class="headerlink" title="jumpserver登录界面介绍"></a>jumpserver登录界面介绍</h2></li><li><p><strong>jumpserver的用户配置</strong></p><blockquote><p>首先就是创建组和用户，用户只是登录web界面的，我们先创建组然后把用户分配到组里面 ，比如开发我们创建一个develope 组，数据库我们创建一个DBA组，然后我们可以根据组授权不同的资产  （让这个组只能看到指定服务器，加入DBA 就只能看到MySQL） 。后期我们就可以只把用户加到组里面，他们登录jumpserver就只能看到指定的服务器</p></blockquote></li><li><p><strong>jumpserver的资产管理</strong></p><blockquote><p>如果机器少可以一个一个手动创建，如果服务器多的话可以直接导入Execl表格，批量进行导入服务器,然后编辑资产的话还需要给 IP分配系统用户，让指定用户连接</p></blockquote></li><li><p><strong>jumpserver系统用户和管理用户</strong></p></li></ul><p><strong>管理用户：就是linux中的root 密码必须和需要连接的服务器密码一样，如果多台都不同还可以编辑管理用户，添加资产的秘钥，这样也可以连接</strong><br><strong>系统用户： 指你需要登录的目标资产主机的普通用户， 这个用户是给你登录目标主机的用户， 批量执行命令的用户</strong></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos和Ubuntu最小化安装命令</title>
      <link href="/2021/11/07/Centos%E5%92%8CUbuntu%E6%9C%80%E5%B0%8F%E5%8C%96%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/11/07/Centos%E5%92%8CUbuntu%E6%9C%80%E5%B0%8F%E5%8C%96%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos-最小化安装命令"><a href="#Centos-最小化安装命令" class="headerlink" title="Centos 最小化安装命令"></a>Centos 最小化安装命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install  vim iotop bc gcc gcc-c++ glibc glibc-devel pcre \</span><br><span class="line">pcre-devel openssl  openssl-devel zip unzip zlib-devel  net-tools \</span><br><span class="line">lrzsz tree ntpdate telnet lsof tcpdump wget libevent libevent-devel \</span><br><span class="line">bc  systemd-devel bash-completion traceroute -y</span><br></pre></td></tr></table></figure><h1 id="Ubuntu-最小化安装命令"><a href="#Ubuntu-最小化安装命令" class="headerlink" title="Ubuntu 最小化安装命令"></a>Ubuntu 最小化安装命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential cmake pkg-config qt4- qmake libqt4-dev desktop-file-utils \ libavformat-dev libavcodec-dev libavutil-dev libswscale- dev libasound2-dev libpulse-dev libjack-jackd2-dev \ libgl1-mesa-dev libglu1-mesa-dev libx11-dev libxfixes-dev libxext-dev libxi-dev libxinerama-dev selinux-utils</span><br></pre></td></tr></table></figure><h2 id="删除一个文件里面的所有空格"><a href="#删除一个文件里面的所有空格" class="headerlink" title="删除一个文件里面的所有空格"></a>删除一个文件里面的所有空格</h2><pre><code>#grepgrep -v &quot;^$&quot; a.txtgrep [^$] ip1 #sedsed &#39;/^$/d&#39; data.txtsed &#39;/^\s*$/d&#39; data.txt #awkawk NF data.txtawk &#39;!/^$/&#39; data.txt#trtr -s &#39;\n&#39; &lt; data.txt</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分库备份的实战脚本</title>
      <link href="/2021/08/27/Mysql%E5%88%86%E5%BA%93%E5%A4%87%E4%BB%BD%E7%9A%84%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/08/27/Mysql%E5%88%86%E5%BA%93%E5%A4%87%E4%BB%BD%E7%9A%84%E5%AE%9E%E6%88%98%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="备份脚本1"><a href="#备份脚本1" class="headerlink" title="备份脚本1"></a>备份脚本1</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">**********************************************************</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">* Author : liujinxin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">* Email : liuJinXin0726@outlook.com</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">* Create time : 2021-05-10 22:12</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">* Filename : openvpnCentos8.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">* Description :</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">**********************************************************</span></span><br><span class="line">PATH=/app/cmatrix/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">. /etc/init.d/functions</span><br><span class="line">TIME=`date +%F`</span><br><span class="line">INCTIME=`date -d -1day`</span><br><span class="line">NAME=`$HOSTNAME`</span><br><span class="line">DIRDATA=/data/backup</span><br><span class="line">DB=hellodb</span><br><span class="line">PASSWD=</span><br><span class="line"></span><br><span class="line">backup_mysqlDB()&#123;</span><br><span class="line">[ -d $DIRDATA ] &#x27;&#x27; mkdir $DIRDATA</span><br><span class="line">mysqldump  -uroot -p&quot;$PASSWD&quot;  -F -A --single-transaction --master-data=1 &#x27; gzip &gt;$DIRDATA_Backup_$TIME.sql.zip</span><br><span class="line">action  &quot;$DIRDATA_Backup_$TIME.sql.zip 备份成功&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backup_mysqlDB_Sub-library()&#123;</span><br><span class="line">[ -d $DIRDATA ] &#x27;&#x27; mkdir $DIRDATA</span><br><span class="line">mysqldump  -uroot -p&quot;$PASSWD&quot;  -F -E -R  --single-transaction --master-data=1  --default-character-set=uft8  -q -B $DB&#x27; gzip &gt;$DIRDATA_Backup_$DB_$TIME.sql.zip</span><br><span class="line">action  &quot;$DIRDATA_Backup_$DB_$TIME.sql.zip 备份成功&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增量备份</span></span><br><span class="line">backup_mysqlDB_Increment()&#123;</span><br><span class="line"></span><br><span class="line">rpm -qi wget &#x27; yum install wget -y</span><br><span class="line">package=Percona-XtraDB-Cluster-server-57-5.7.33-31.49.1.el7.x86_64.rpm</span><br><span class="line">yum install -y $package</span><br><span class="line">[ -d  $DIRDATA ] &#x27; mkdir $DIRDATA</span><br><span class="line">complete()&#123;</span><br><span class="line">xtrabackup -uroot -p&quot;$PASSWD&quot; --backup --target-dir=$DIRDATA/$NAME_$TIME   #完全备份</span><br><span class="line">&#125;</span><br><span class="line">one_inc()&#123;</span><br><span class="line">xtrabackup -uroot -p&quot;$PASSWD&quot; --backup --target-dir=$DIRDATA/$NAME_Increment_$TIME  --increment-basedir=$DIRDATA/$NAME_$INCTIME  </span><br><span class="line">&#125;</span><br><span class="line">two_inc()&#123;</span><br><span class="line">xtrabackup -uroot -p&quot;$PASSWD&quot; --backup --target-dir=DIRDATA/$NAME_Increment_$TIME   --increment-basedir=$DIRDATA/$NAME_Increment_$INCTIME   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">PS3=&quot;请输入需要备份的菜单(1-5):&quot;</span><br><span class="line">select NEMU in  完全备份  分库备份   增量备份;do</span><br><span class="line">case $REPLY in </span><br><span class="line">1)</span><br><span class="line">      backup_mysqlDB</span><br><span class="line">  ;;</span><br><span class="line">2) </span><br><span class="line"></span><br><span class="line">    backup_mysqlDB_Sub-library</span><br><span class="line">  ;;</span><br><span class="line">3)</span><br><span class="line">    backup_mysqlDB_Increment</span><br><span class="line">  ;;</span><br><span class="line">4)</span><br><span class="line">    function_openvpn.remove</span><br><span class="line">  ;;</span><br><span class="line">*) </span><br><span class="line">    echo &quot;Please enter the correct parameters (0-6) &quot;</span><br><span class="line">esac </span><br><span class="line"> done </span><br></pre></td></tr></table></figure><h2 id="备份脚本2"><a href="#备份脚本2" class="headerlink" title="备份脚本2"></a>备份脚本2</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#********************************************************************</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Author:            Mr.yang</span>                                                          </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">QQ:                1419946323</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Date:              2021-06-22</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">FileName：         mysq_backup.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">URL:               www.yhtzjy.com</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description：      The <span class="built_in">test</span> script</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Copyright (C):     2021 All rights reserved</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">********************************************************************</span></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">TIME=`date +%F_%H-%M-%S`</span><br><span class="line">DIR=/backup</span><br><span class="line">DB=hellodb</span><br><span class="line">PASS=magedu</span><br><span class="line">[ -d $DIR ] &#x27;&#x27; mkdir $DIR</span><br><span class="line">mysqldump -uroot -p &quot;$PASS&quot; -F -E -R --triggers --single-transaction --master-data=2 --default-character-set=utf8 -q -B $DB &#x27; gzip &gt; $&#123;DIR&#125;/$&#123;DB&#125;_$&#123;TIME&#125;.sql.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生产中略有不同只供参考</span></span><br><span class="line">chmod +x mysql_backup.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生产建议添加计划任务脚本</span></span><br><span class="line">crontable -e </span><br><span class="line">* * * * * /root/mysql_backup.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行成功后我们可以解开查看是否可以还原,生产中可以拷贝到新的数据库测试</span></span><br><span class="line">set sql_log_bin=0; #先关闭二进制日志</span><br><span class="line">souce /backup/*</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后续在启用二进制日志</span></span><br><span class="line">set sql_logbin=1;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql编译安装5.7.31</title>
      <link href="/2021/08/27/Mysql%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%855.7.31/"/>
      <url>/2021/08/27/Mysql%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%855.7.31/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#********************************************************************</span></span><br><span class="line"><span class="comment">#Author:        Mr.yang</span></span><br><span class="line"><span class="comment">#QQ:            1419946323</span></span><br><span class="line"><span class="comment">#Date:          2020-02-12</span></span><br><span class="line"><span class="comment">#FileName：      install_mysql5.7_for_centos.sh</span></span><br><span class="line"><span class="comment">#URL:           http://www.yhtzjy.com</span></span><br><span class="line"><span class="comment">#Description：       The test script</span></span><br><span class="line"><span class="comment">#Copyright (C):     2020 All rights reserved</span></span><br><span class="line"><span class="comment">#********************************************************************</span></span><br><span class="line"><span class="comment">#MySQL Download URL: https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.29-linux-glibc2.12-x86_64.tar.gz</span></span><br><span class="line"></span><br><span class="line">. /etc/init.d/functions </span><br><span class="line">SRC_DIR=`<span class="built_in">pwd</span>`</span><br><span class="line">MYSQL=<span class="string">&#x27;mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz&#x27;</span></span><br><span class="line">COLOR=<span class="string">&#x27;echo -e \E[01;31m&#x27;</span></span><br><span class="line">END=<span class="string">&#x27;\E[0m&#x27;</span></span><br><span class="line">MYSQL_ROOT_PASSWORD=magedu</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check</span></span> ()&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  action <span class="string">&quot;当前用户不是root,安装失败&quot;</span> <span class="literal">false</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>  <span class="variable">$SRC_DIR</span></span><br><span class="line"><span class="keyword">if</span> [ !  -e <span class="variable">$MYSQL</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="variable">$COLOR</span><span class="string">&quot;缺少<span class="variable">$&#123;MYSQL&#125;</span>文件&quot;</span><span class="variable">$END</span></span><br><span class="line">        <span class="variable">$COLOR</span><span class="string">&quot;请将相关软件放在<span class="variable">$&#123;SRC_DIR&#125;</span>目录下&quot;</span><span class="variable">$END</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">elif</span> [ -e /usr/local/mysql ];<span class="keyword">then</span></span><br><span class="line">        action <span class="string">&quot;数据库已存在，安装失败&quot;</span> <span class="literal">false</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install_mysql</span></span>()&#123;</span><br><span class="line">    <span class="variable">$COLOR</span><span class="string">&quot;开始安装MySQL数据库...&quot;</span><span class="variable">$END</span></span><br><span class="line">    yum  -y -q install libaio numactl-libs   libaio &amp;&gt; /dev/null</span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$SRC_DIR</span></span><br><span class="line">    tar xf <span class="variable">$MYSQL</span> -C /usr/local/</span><br><span class="line">    MYSQL_DIR=`<span class="built_in">echo</span> <span class="variable">$MYSQL</span><span class="string">&#x27; sed -nr &#x27;</span>s/^(.*[0-9]).*/\1/p<span class="string">&#x27;`</span></span><br><span class="line"><span class="string">    ln -s  /usr/local/$MYSQL_DIR /usr/local/mysql</span></span><br><span class="line"><span class="string">    chown -R  root.root /usr/local/mysql/</span></span><br><span class="line"><span class="string">    id mysql &amp;&gt; /dev/null &#x27;</span><span class="string">&#x27; &#123; useradd -s /sbin/nologin -r  mysql ; action &quot;创建mysql用户&quot;; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    echo &#x27;</span>PATH=/usr/local/mysql/bin/:<span class="variable">$PATH</span><span class="string">&#x27; &gt; /etc/profile.d/mysql.sh</span></span><br><span class="line"><span class="string">    .  /etc/profile.d/mysql.sh</span></span><br><span class="line"><span class="string">    ln -s /usr/local/mysql/bin/* /usr/bin/</span></span><br><span class="line"><span class="string">    cat &gt; /etc/my.cnf &lt;&lt;-EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">server-id=1</span></span><br><span class="line"><span class="string">log-bin</span></span><br><span class="line"><span class="string">datadir=/data/mysql</span></span><br><span class="line"><span class="string">socket=/data/mysql/mysql.sock                                                                                                   </span></span><br><span class="line"><span class="string">log-error=/data/mysql/mysql.log</span></span><br><span class="line"><span class="string">pid-file=/data/mysql/mysql.pid</span></span><br><span class="line"><span class="string">[client]</span></span><br><span class="line"><span class="string">socket=/data/mysql/mysql.sock</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">    mysqld --initialize --user=mysql --datadir=/data/mysql </span></span><br><span class="line"><span class="string">    cp /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld</span></span><br><span class="line"><span class="string">    chkconfig --add mysqld</span></span><br><span class="line"><span class="string">    chkconfig mysqld on</span></span><br><span class="line"><span class="string">    service mysqld start</span></span><br><span class="line"><span class="string">    [ $? -ne 0 ] &amp;&amp; &#123; $COLOR&quot;数据库启动失败，退出!&quot;$END;exit; &#125;</span></span><br><span class="line"><span class="string">    MYSQL_OLDPASSWORD=`awk &#x27;</span>/A temporary password/&#123;<span class="built_in">print</span> <span class="variable">$NF</span>&#125;<span class="string">&#x27; /data/mysql/mysql.log`</span></span><br><span class="line"><span class="string">    mysqladmin  -uroot -p$MYSQL_OLDPASSWORD password $MYSQL_ROOT_PASSWORD &amp;&gt;/dev/null</span></span><br><span class="line"><span class="string">    action &quot;数据库安装完成&quot; </span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">check</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">install_mysql</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PXE_centos一键安装</title>
      <link href="/2021/08/27/PXE_centos%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/"/>
      <url>/2021/08/27/PXE_centos%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line">vim install_PXE.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#********************************************************************</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Author:            Mr.yang</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">QQ:                1419946323</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Date:              2021-07-12</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">FileName：         auto_install_centos678_PXE.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">URL:               www.yhtzjy.com</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Description：      The <span class="built_in">test</span> script</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Copyright (C):     2021 All rights reserved</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">********************************************************************</span></span><br><span class="line"></span><br><span class="line">ReleaseNo=`cat /etc/redhat-release &#x27;sed -rn &#x27;s/.* ([[:digit:]]+)\..*/\1/p&#x27;`</span><br><span class="line">PXEinstall()&#123;</span><br><span class="line">setenforce 0</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">rpm -q net-tools &#x27;&#x27;yum -y install net-tools &amp;&gt; /dev/null</span><br><span class="line">ifconfig &#x27;grep eth0</span><br><span class="line">if [ &quot;$?&quot; -ne &quot;0&quot; ];then</span><br><span class="line">    echo &quot;请将网卡更名为eth0;才能继续运行本脚本；更改过程中会强制重启；您是否还要继续执行？&quot;</span><br><span class="line">    read -p &quot; 请按y继续运行: &quot; ipsure</span><br><span class="line">    [ &quot;$&#123;ipsure&#125;&quot; == &quot;y&quot; ] &amp;&amp; sed -ir &#x27;/GRUB_CMDLINE_LINUX=/s/&quot;$/ net.ifnames=0&quot;/p&#x27; /etc/default/grub &amp;&amp; grub2-mkconfig -o /etc/grub2.cfg &amp;&gt;/dev/null</span><br><span class="line">    read -p &quot;请输入eth0的IP: &quot; ip</span><br><span class="line">    read -p &quot;请输入要设置的子网掩码（prefix）如 24: &quot; prefix</span><br><span class="line">    read -p &quot;请输入要设置的网关： &quot; gateway</span><br><span class="line">    cat &gt;/etc/sysconfig/network-scripts/ifcfg-eth0 &lt;&lt;EOF</span><br><span class="line">DEVICE=&quot;eth0&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">IPADDR=$ip</span><br><span class="line">PREFIX=$prefix</span><br><span class="line">GATEWAY=$gateway</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">EOF</span><br><span class="line">    echo &quot;请重启系统；然后重新执行本脚本&quot;</span><br><span class="line">    echo &quot;重启后如果无法联网 请执行service network restart 或者 nmcli con reload; nmcli con up eth0&quot;</span><br><span class="line">    reboot</span><br><span class="line">fi</span><br><span class="line">ipeth0=`ifconfig eth0&#x27;sed -rn &#x27;/inet\&gt;/s/[^0-9]+([0-9.]+).*/\1/p&#x27;`</span><br><span class="line">neteth0=`ifconfig eth0&#x27;sed -rn &#x27;/inet\&gt;/s/[^0-9]+([0-9.]+).*/\1/p&#x27;&#x27;cut -d. -f1-3`</span><br><span class="line">route=`ip route&#x27;grep default&#x27;grep eth0&#x27;sed -rn &#x27;s/[^0-9]+([0-9.]+).*/\1/p&#x27;`</span><br><span class="line">route6=`ip route&#x27;grep default&#x27;sed -rn &#x27;s/[^0-9]+([0-9.]+).*/\1/p&#x27;`</span><br><span class="line">srinfo6=`lsblk&#x27;awk &#x27;/sr/&#123;print $1&#125;&#x27;`</span><br><span class="line">srinfo=`lsblk&#x27;egrep -o &#x27;sr[^ ]*&#x27;`</span><br><span class="line">for scan in /sys/class/scsi_host/host*/scan;do echo &quot;- - -&quot; &gt;$scan;done</span><br><span class="line">if [ &quot;$ReleaseNo&quot; -eq &quot;8&quot; ];then            </span><br><span class="line">    rpm -q dhcp-server tftp-server httpd syslinux-nonlinux&#x27;&#x27; dnf -y install dhcp-server tftp-server httpd syslinux-nonlinux </span><br><span class="line">cat &gt;/etc/dhcp/dhcpd.conf &lt;&lt;-EOF</span><br><span class="line">option domain-name &quot;example.org&quot;;</span><br><span class="line">option domain-name-servers 180.76.76.76,114.114.114.114;</span><br><span class="line">default-lease-time 600;</span><br><span class="line">max-lease-time 7200;</span><br><span class="line">log-facility local7;</span><br><span class="line">subnet $&#123;neteth0&#125;.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range $&#123;neteth0&#125;.100 $&#123;neteth0&#125;.200;</span><br><span class="line">  option routers $&#123;route&#125;;</span><br><span class="line">  next-server $&#123;ipeth0&#125;;</span><br><span class="line">  filename &quot;pxelinux.0&quot;;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">    systemctl enable --now httpd tftp dhcpd</span><br><span class="line">fi </span><br><span class="line">if [ &quot;$ReleaseNo&quot; -eq &quot;7&quot; ];then            </span><br><span class="line">    rpm -q httpd tftp-server dhcp syslinux&#x27;&#x27;yum -y install httpd tftp-server dhcp syslinux </span><br><span class="line">cat &gt;/etc/dhcp/dhcpd.conf &lt;&lt;-EOF</span><br><span class="line">option domain-name &quot;example.org&quot;;</span><br><span class="line">option domain-name-servers 180.76.76.76,114.114.114.114;</span><br><span class="line">default-lease-time 600;</span><br><span class="line">max-lease-time 7200;</span><br><span class="line">log-facility local7;</span><br><span class="line">subnet $&#123;neteth0&#125;.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range $&#123;neteth0&#125;.100 $&#123;neteth0&#125;.200;</span><br><span class="line">  option routers $&#123;route&#125;;</span><br><span class="line">  next-server $&#123;ipeth0&#125;;</span><br><span class="line">  filename &quot;pxelinux.0&quot;;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">    systemctl enable --now httpd tftp dhcpd</span><br><span class="line">fi </span><br><span class="line">if [ &quot;$ReleaseNo&quot; -eq &quot;6&quot; ];then            </span><br><span class="line">    rpm -q httpd tftp-server dhcp syslinux&#x27;&#x27;yum -y install httpd tftp-server dhcp syslinux </span><br><span class="line">    service httpd start</span><br><span class="line">    sed -i &#x27;/disable/s/yes/no/&#x27; /etc/xinetd.d/tftp</span><br><span class="line">    service xinetd restart</span><br><span class="line">cat &gt;/etc/dhcp/dhcpd.conf &lt;&lt;EOF</span><br><span class="line">option domain-name &quot;example.org&quot;;</span><br><span class="line">option domain-name-servers 180.76.76.76,114.114.114.114;</span><br><span class="line">default-lease-time 600;</span><br><span class="line">max-lease-time 7200;</span><br><span class="line">log-facility local7;</span><br><span class="line">subnet $&#123;neteth0&#125;.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range $&#123;neteth0&#125;.100 $&#123;neteth0&#125;.200;</span><br><span class="line">  option routers $&#123;route6&#125;;</span><br><span class="line">  next-server $&#123;ipeth0&#125;;</span><br><span class="line">  filename &quot;pxelinux.0&quot;;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">    service dhcpd start</span><br><span class="line">fi </span><br><span class="line">    mkdir /var/www/html/centos/&#123;6,7,8&#125;/isos/x86_64/ -pv &amp;&gt;/dev/null</span><br><span class="line">if [ &quot;$ReleaseNo&quot; -eq &quot;7&quot; -o &quot;$ReleaseNo&quot; -eq &quot;8&quot; ];then</span><br><span class="line">    srinfo6=$&#123;srinfo&#125;</span><br><span class="line">fi</span><br><span class="line">    for sr in $&#123;srinfo6&#125;;do</span><br><span class="line">        mkdir /mnt/$&#123;sr&#125; -p &amp;&gt;/dev/null</span><br><span class="line">        mount /dev/$&#123;sr&#125; /mnt/$&#123;sr&#125; </span><br><span class="line">        if [ -d /mnt/$&#123;sr&#125;/AppStream ];then</span><br><span class="line">            mount /dev/$&#123;sr&#125; /var/www/html/centos/8/isos/x86_64/ &amp;&gt;/dev/null</span><br><span class="line">            mkdir  /var/www/html/ksdir -p &amp;&gt;/dev/null</span><br><span class="line">            mkdir /var/lib/tftpboot/8 -p &amp;&gt; /dev/null</span><br><span class="line">            \cp -a /mnt/$&#123;sr&#125;/isolinux/&#123;vmlinuz,initrd.img&#125; /var/lib/tftpboot/8/</span><br><span class="line">            \cp /mnt/$&#123;sr&#125;/isolinux/&#123;ldlinux.c32,libcom32.c32,libutil.c32&#125; /var/lib/tftpboot/</span><br><span class="line">cat &gt;/var/www/html/ksdir/ks8.cfg &lt;&lt;-EOF</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">version=RHEL8</span></span><br><span class="line">ignoredisk --only-use=sda</span><br><span class="line">zerombr</span><br><span class="line">text</span><br><span class="line">reboot</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Partition clearing information</span></span><br><span class="line">clearpart --all --initlabel</span><br><span class="line">selinux --disabled</span><br><span class="line">firewall --disabled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use graphical install</span></span><br><span class="line">url --url=http://$&#123;ipeth0&#125;/centos/8/isos/x86_64/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">repo --name=<span class="string">&quot;AppStream&quot;</span> --baseurl=file:///run/install/repo/AppStream</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use CDROM installation media</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">cdrom</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Keyboard layouts</span></span><br><span class="line">keyboard --vckeymap=us --xlayouts=&#x27;us&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">System language</span></span><br><span class="line">lang en_US.UTF-8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Network information</span></span><br><span class="line">network  --bootproto=dhcp --device=ens160 --onboot=yes --ipv6=auto --no-activate</span><br><span class="line">network  --hostname=localhost.localdomain</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Root password</span></span><br><span class="line">rootpw --iscrypted \$1\$jb2QI2x8\$wWAOeOxXerdfYXyVwV0890</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run the Setup Agent on first boot</span></span><br><span class="line">firstboot --enable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Do not configure the X Window System</span></span><br><span class="line">skipx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">System services</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">services --disabled=<span class="string">&quot;chronyd&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">System timezone</span></span><br><span class="line">timezone Asia/Shanghai --isUtc --nontp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Disk partitioning information</span></span><br><span class="line">part / --fstype=&quot;xfs&quot; --ondisk=sda --size=102400</span><br><span class="line">part /data --fstype=&quot;xfs&quot; --ondisk=sda --size=51200</span><br><span class="line">part swap --fstype=&quot;swap&quot; --ondisk=sda --size=2048</span><br><span class="line">part /boot --fstype=&quot;ext4&quot; --ondisk=sda --size=1024</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">addon com_redhat_kdump --<span class="built_in">disable</span> --reserve-mb=<span class="string">&#x27;auto&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">packages</span></span><br><span class="line">@^minimal-environment</span><br><span class="line">kexec-tools</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">end</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">anaconda</span></span><br><span class="line">pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty</span><br><span class="line">pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok</span><br><span class="line">pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">end</span></span><br><span class="line">EOF</span><br><span class="line">        fi</span><br><span class="line">        if [ -e /mnt/$&#123;sr&#125;/RPM-GPG-KEY-CentOS-6 ];then</span><br><span class="line">            mount /dev/$&#123;sr&#125; /var/www/html/centos/6/isos/x86_64/ &amp;&gt;/dev/null</span><br><span class="line">            mkdir  /var/www/html/ksdir -p &amp;&gt;/dev/null</span><br><span class="line">            mkdir /var/lib/tftpboot/6 -p &amp;&gt;/dev/null</span><br><span class="line">            \cp -a /mnt/$&#123;sr&#125;/isolinux/&#123;vmlinuz,initrd.img&#125; /var/lib/tftpboot/6/ &amp;&gt;/dev/null</span><br><span class="line">cat &gt;/var/www/html/ksdir/ks6.cfg &lt;&lt;EOF</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ckstart file automatically generated by anaconda.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">version=DEVEL</span></span><br><span class="line">install</span><br><span class="line">url --url=http://$&#123;ipeth0&#125;/centos/6/isos/x86_64/</span><br><span class="line">lang en_US.UTF-8</span><br><span class="line">keyboard us</span><br><span class="line">network --onboot yes --device eth0 --bootproto dhcp --noipv6</span><br><span class="line">rootpw  --iscrypted \$1\$jb2QI2x8\$wWAOeOxXerdfYXyVwV0890</span><br><span class="line">firewall --disabled</span><br><span class="line">authconfig --enableshadow --passalgo=sha512</span><br><span class="line">selinux --disabled</span><br><span class="line">timezone Asia/Shanghai</span><br><span class="line">bootloader --location=mbr --driveorder=sda --append=&quot;crashkernel=auto rhgb quiet&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The following is the partition information you requested</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note that any partitions you deleted are not expressed</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">here so unless you clea:r all partitions first, this is</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">not guaranteed to work</span></span><br><span class="line">clearpart --all</span><br><span class="line">zerombr</span><br><span class="line">reboot</span><br><span class="line">text</span><br><span class="line">part /boot --fstype=ext4 --size=1024</span><br><span class="line">part / --fstype=ext4 --size=100000</span><br><span class="line">part /data --fstype=ext4 --size=50000</span><br><span class="line">part swap --size=2048</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">packages</span></span><br><span class="line">@core</span><br><span class="line">autofs</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">end</span></span><br><span class="line">EOF</span><br><span class="line">        fi</span><br><span class="line">        if [ -e /mnt/$&#123;sr&#125;/RPM-GPG-KEY-CentOS-7 ];then</span><br><span class="line">                mount /dev/$&#123;sr&#125; /var/www/html/centos/7/isos/x86_64/ &amp;&gt;/dev/null</span><br><span class="line">            mkdir  /var/www/html/ksdir -p &amp;&gt;/dev/null</span><br><span class="line">            mkdir /var/lib/tftpboot/7 -p &amp;&gt;/dev/null</span><br><span class="line">            \cp -a /mnt/$&#123;sr&#125;/isolinux/&#123;vmlinuz,initrd.img&#125; /var/lib/tftpboot/7/</span><br><span class="line">cat &gt;/var/www/html/ksdir/ks7.cfg &lt;&lt;EOF</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">platform=x86, AMD64, or Intel EM64T</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">version=DEVEL</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Install OS instead of upgrade</span></span><br><span class="line">install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">X Window System configuration information</span></span><br><span class="line">xconfig  --startxonboot</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Keyboard layouts</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">old format: keyboard us</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">new format:</span></span><br><span class="line">keyboard --vckeymap=us --xlayouts=&#x27;us&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Root password</span></span><br><span class="line">rootpw --iscrypted \$1\$jb2QI2x8\$wWAOeOxXerdfYXyVwV0890</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use network installation</span></span><br><span class="line">url --url=&quot;http://$&#123;ipeth0&#125;/centos/7/isos/x86_64&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">System language</span></span><br><span class="line">lang en_US</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">System authorization information</span></span><br><span class="line">auth  --useshadow  --passalgo=sha512</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use text mode install</span></span><br><span class="line">text</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run the Setup Agent on first boot</span></span><br><span class="line">firstboot --enable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SELinux configuration</span></span><br><span class="line">selinux --disabled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Do not configure the X Window System</span></span><br><span class="line">skipx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">System services</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">services --disabled=<span class="string">&quot;chronyd&quot;</span></span></span><br><span class="line">ignoredisk --only-use=sda</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Firewall configuration</span></span><br><span class="line">firewall --disabled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Network information</span></span><br><span class="line">network  --bootproto=dhcp --device=ens33</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Reboot after installation</span></span><br><span class="line">reboot</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">System timezone</span></span><br><span class="line">timezone Asia/Shanghai --nontp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">System bootloader configuration</span></span><br><span class="line">bootloader --append=&quot;crashkernel=auto&quot; --location=mbr --boot-drive=sda</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Clear the Master Boot Record</span></span><br><span class="line">zerombr</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Partition clearing information</span></span><br><span class="line">clearpart --all --initlabel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Disk partitioning information</span></span><br><span class="line">part swap --fstype=&quot;swap&quot; --ondisk=sda --size=2048</span><br><span class="line">part / --fstype=&quot;xfs&quot; --ondisk=sda --size=100000</span><br><span class="line">part /boot --fstype=&quot;xfs&quot; --ondisk=sda --size=1024</span><br><span class="line">part /data --fstype=&quot;xfs&quot; --ondisk=sda --size=50000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">packages</span></span><br><span class="line">@core</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">end</span></span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">\cp /usr/share/syslinux/&#123;pxelinux.0,menu.c32&#125; /var/lib/tftpboot/</span><br><span class="line">mkdir /var/lib/tftpboot/pxelinux.cfg/ -p</span><br><span class="line">cat &gt;/var/lib/tftpboot/pxelinux.cfg/default &lt;&lt;EOF</span><br><span class="line">default menu.c32</span><br><span class="line">timeout 600</span><br><span class="line"></span><br><span class="line">menu title CentOS Linux </span><br><span class="line"></span><br><span class="line">label linux8</span><br><span class="line">  menu label Auto Install CentOS Linux ^8.0 Mini</span><br><span class="line">  kernel 8/vmlinuz</span><br><span class="line">  append initrd=8/initrd.img ks=http://$&#123;ipeth0&#125;/ksdir/ks8.cfg</span><br><span class="line"></span><br><span class="line">label linux7</span><br><span class="line">  menu label Auto Install CentOS Linux ^7 Mini</span><br><span class="line">  kernel 7/vmlinuz</span><br><span class="line">  append initrd=7/initrd.img ks=http://$&#123;ipeth0&#125;/ksdir/ks7.cfg</span><br><span class="line"></span><br><span class="line">label linux6</span><br><span class="line">  menu label Auto Install CentOS Linux ^6 Mini</span><br><span class="line">  kernel 6/vmlinuz</span><br><span class="line">  append initrd=6/initrd.img ks=http://$&#123;ipeth0&#125;/ksdir/ks6.cfg</span><br><span class="line"></span><br><span class="line">label local</span><br><span class="line">  menu default </span><br><span class="line">  menu label Boot from ^local drive</span><br><span class="line">  localboot 0xffff</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;**********************************************************************************************&quot;</span><br><span class="line">echo &quot;***********************************请确保在nat网卡模式下运行***********************************&quot;</span><br><span class="line">echo &quot;**********************************************************************************************&quot;</span><br><span class="line">echo &quot;1..这是一个pxe 自动化安装的脚本；兼容centos6、7、8系统，需要将网卡同一设置为eth0;会自动更改网卡eth0&quot;</span><br><span class="line">echo &quot;2..需要你至少挂载一个光盘；支持cenos6、7、8的光盘&quot;</span><br><span class="line">echo &quot;3..新建虚拟机建议20G 2G内存以上 不然容易报错；&quot;</span><br><span class="line">echo &quot;4..如果运行中有错误请与我联系！谢谢&quot;</span><br><span class="line">echo &quot;5..如果网卡更改后重启了，务必确认是否能ping百度或查看是否有默认网关&quot;</span><br><span class="line">echo &quot;6..如果执行本脚本后发现没有挂载光盘，请执行 yum remove dhcp&#x27;dhcp-server httpd tftp-server 清理环境&quot;</span><br><span class="line">echo &quot;7..运行脚本需要在当前shell运行，不要开启子shell，否则无法使用自动更改网卡名功能&quot;</span><br><span class="line">echo &quot;**************************************************************************************&quot;</span><br><span class="line">echo &quot;**************************************************************************************&quot;</span><br><span class="line">echo &quot;虚拟机默认密码为123&quot;</span><br><span class="line">j=5</span><br><span class="line">for i in `seq 5`;do</span><br><span class="line">        echo &quot;$&#123;j&#125;s后自动开始运行&quot;</span><br><span class="line">        let j--</span><br><span class="line">        sleep 1</span><br><span class="line">done</span><br><span class="line">PXEinstall</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHELL练习脚本100例</title>
      <link href="/2021/08/27/SHELL%E7%BB%83%E4%B9%A0%E8%84%9A%E6%9C%AC100%E4%BE%8B/"/>
      <url>/2021/08/27/SHELL%E7%BB%83%E4%B9%A0%E8%84%9A%E6%9C%AC100%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="批量设置账号并设置随机密码"><a href="#批量设置账号并设置随机密码" class="headerlink" title="批量设置账号并设置随机密码"></a>批量设置账号并设置随机密码</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-06-27#FileName：          userfor.sh#URL:               www.yhtzjy.com#Description：       The test script#Copyright (C):     2021 All rights reserved#********************************************************************for i in &#123;1..10&#125;;do    useradd user$i    PASS=`cat /dev/urandom &#39; tr -dc &#39;[:alnum:]&#39; &#39;head -c 12`    echo $PASS &#39; passwd --stdin user$i &amp; &gt; /dev/null    echo user$i:$PASS &gt;&gt; /data/user.log    echo &quot;user$i is create&quot;done</code></pre><h3 id="将目录YYYY-MM-DD-x2F-中所有文件，移动到YYYY-MM-x2F-DD-x2F-下"><a href="#将目录YYYY-MM-DD-x2F-中所有文件，移动到YYYY-MM-x2F-DD-x2F-下" class="headerlink" title="将目录YYYY-MM-DD&#x2F;中所有文件，移动到YYYY-MM&#x2F;DD&#x2F;下"></a>将目录YYYY-MM-DD&#x2F;中所有文件，移动到YYYY-MM&#x2F;DD&#x2F;下</h3><pre><code>#先创建YYYY-MM-DD格式的目录，当前日期一年前365天到目前共365个目录，里面有10个文件.log后缀的文件#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-06-27#FileName：          for_dir.sh#URL:               www.yhtzjy.com#Description：       The test script#Copyright (C):     2021 All rights reserved#********************************************************************PDIR=/data/testfor i in &#123;1..365&#125;;do    DIR=`date -d &quot;-$i day&quot; +%F`    mkdir -pv $PDIR/$DIR    cd $PDIR/$DIR    for j in &#123;1..10&#125;;do        touch $RANDOM.log    donedone#2 .将上面的目录移动到YYYY-MM/DD/下  #!/bin/bash##********************************************************************#Author:            Mr.yang #QQ:                1419946323#Date:              2021-06-27#FileName：          dir.sh#URL:               www.yhtzjy.com#Description：       The test script#Copyright (C):     2021 All rights reserved#********************************************************************DIR=/data/testcd $DIR &#39;&#39; &#123; echo 无法进入 $DIR;exit 1 ; &#125;for subdir in * ;do    YYYY_MM=`echo $subdir &#39;cut -d&quot;-&quot; -f1,2`    DD=`echo $subdir &#39;cut -d&quot;-&quot; -f3`    [ -d $YYYY_MM/$DD ] &#39;&#39; mkdir -p $YYYY_MM/$DD &amp;&gt; /dev/null    mv $subdir/* $YYYY_MM/$DDdonerm -rf $DIR/*-*-*</code></pre><h3 id="将指定目录下的文件所有文件的后缀改名为-bak-后缀"><a href="#将指定目录下的文件所有文件的后缀改名为-bak-后缀" class="headerlink" title="将指定目录下的文件所有文件的后缀改名为 bak 后缀"></a>将指定目录下的文件所有文件的后缀改名为 bak 后缀</h3><pre><code>#!/bin/bash# #********************************************************************#Author:            Mr.yang                                                                   #QQ:                1419946323#Date:              2021-06-27#FileName：         for_rename.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************DIR=/data/testcd $DIR &#39;&#39; &#123; echo 无法进入 $DIR;exit 1; &#125;for FILE in * ;do    PRE=`echo $FILE &#39;grep -Eo &quot;.*\.&quot;`    mv $FILE $&#123;PRE&#125;bak#   PRE=`echo $FILE&#39;rev&#39;cut -d. -f 2-&#39;rev`#   PRE=`echo $FILE &#39; sed -nr &#39;s/(.*)\.([^.]+)$/\1/p&#39;#   PRE=`echo $FILE &#39; sed -nr &#39;s/(.*)\.([^.]+)$/\2/p&#39;`#   mv $FILE $PRE.bakdone</code></pre><h3 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h3><pre><code>#!/bin/bash                                                                                   ##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-06-28#FileName：         9x9.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************for i in &#123;1..9&#125;;do    for (( j=1;j&lt;=i;j++ ));do    printf &quot;$&#123;j&#125;x$&#123;i&#125;=$[i*j]\t&quot;  done  printf &quot;\n&quot;done</code></pre><h3 id="九九彩色乘法表"><a href="#九九彩色乘法表" class="headerlink" title="九九彩色乘法表"></a>九九彩色乘法表</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang                                                                   #QQ:                1419946323#Date:              2021-06-28#FileName：         9x9_for.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************for i in &#123;1..9&#125;;do    for j in `seq $i`;do       printf &quot;\E[1;$[RANDOM%7+31]m$&#123;j&#125;x$&#123;i&#125;=$[i*j]\t&quot;     done   printf &quot;\n&quot;done</code></pre><h3 id="倒装九九彩色乘法表"><a href="#倒装九九彩色乘法表" class="headerlink" title="倒装九九彩色乘法表"></a>倒装九九彩色乘法表</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang #QQ:                1419946323#Date:              2021-06-28#FileName：         9x9_for.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************for ((i=1;i&lt;=9;i++));do    for j in $(seq `echo $[10-$i]`);do        printf &quot;\E[1;$[RANDOM%7+31]m$&#123;j&#125;x`echo $[10-i]`=$(((10-i)*j))\E[0m\t&quot;            done                                                                                  printf &quot;\n&quot;done</code></pre><h3 id="批量创建用户"><a href="#批量创建用户" class="headerlink" title="批量创建用户"></a>批量创建用户</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang                                                                   #QQ:                1419946323#Date:              2021-06-29#FileName：         user.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************[ $# -eq 0 ] &amp;&amp; &#123; echo &quot;usage:createuser.sh USERNAME ...&quot; ; exit 1 ; &#125;for user ;do    id $user &amp;&gt; /dev/null &amp;&amp; echo $user is exist &#39;&#39; &#123; useradd $user ; echo $user is created; &#125;done</code></pre><h3 id="计算1-2-3-…-100-的结果"><a href="#计算1-2-3-…-100-的结果" class="headerlink" title="计算1+2+3+…+100 的结果"></a>计算1+2+3+…+100 的结果</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang #QQ:                1419946323#Date:              2021-06-29#FileName：         user.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************sum=0;for i in &#123;1..100&#125;;do    let sum+=i;    done                                                                                      echo sum=$sum</code></pre><h3 id="打印三角形闪亮的小星星"><a href="#打印三角形闪亮的小星星" class="headerlink" title="打印三角形闪亮的小星星"></a>打印三角形闪亮的小星星</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-06-29#FileName：         for_star.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************for j in &#123;1..6&#125;;do    for i in `seq $j`;do        echo -e &quot;\E[5;1;$[RANDOM%7+31]m*\E[0m\c&quot;        done    echodone </code></pre><h3 id="删库跑路之命令rm的安全实现"><a href="#删库跑路之命令rm的安全实现" class="headerlink" title="删库跑路之命令rm的安全实现"></a>删库跑路之命令rm的安全实现</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-06-30#FileName：         rm.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************WARNING_COLOR=&quot;echo -e \E[1;31m&quot;END=&quot;\E[0m&quot;DIR=/tmp/`date +%F_%H-%M-%S`mkdir $DIRmv  $*  $DIR$&#123;WARNING_COLOR&#125;Move $* to $DIR $END[root@centos8 ~]#chmod a+x /data/scripts/rm.sh[root@centos8 ~]#alias rm=&#39;/data/scripts/rm.sh&#39;[root@centos8 ~]#touch &#123;1..10&#125;.txt[root@centos8 ~]#rm *.txtMove 10.txt 1.txt 2.txt 3.txt 4.txt 5.txt 6.txt 7.txt 8.txt 9.txt to /tmp/2020-04-01_15-15-28</code></pre><h3 id="运维菜单实现版本2"><a href="#运维菜单实现版本2" class="headerlink" title="运维菜单实现版本2"></a>运维菜单实现版本2</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-06-30#FileName：         work_menu.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************echo -en &quot;\E[$RANDOM%7+31];1m&quot;cat &lt;&lt;EOF请选择：1) 备份数据库2) 清理日志3) 软件升级4) 软件回滚5) 删库跑路EOFecho -en &#39;\E[0m&#39;read -p &quot;请输入上面的数字1-5：&quot; MENUcase $MENU in1)     echo &quot;执行备份数据库&quot;    #./backup.sh    ;;2)    echo &quot;清理日志&quot;    ;;3)    echo &quot;软件升级&quot;    ;;4)    echo &quot;软件回滚&quot;    ;;5)    echo &quot;删库跑路&quot;    ;;*)    echo &quot;INPUT FALSE!&quot;esac</code></pre><h3 id="显示当前主机系统信息"><a href="#显示当前主机系统信息" class="headerlink" title="显示当前主机系统信息"></a>显示当前主机系统信息</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang                                                                                                                                                                 #QQ:                1419946323#Date:              2021-07-01#FileName：         system_info.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************RED=&quot;\E[1;31m&quot;GREEN=&quot;\E[1;32m&quot;END=&quot;\E[0m&quot;echo -e  &quot;$GREEN----------------------Host systeminfo--------------------$END&quot;echo -e  &quot;HOSTNAME:     $RED`hostname`$END&quot;echo -e  &quot;IPADDR:       $RED` ifconfig eth0&#39;grep -Eo &#39;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&#39; &#39;head -n1`$END&quot;echo -e  &quot;OSVERSION:    $RED`cat /etc/redhat-release`$END&quot;echo -e  &quot;KERNEL:       $RED`uname -r`$END&quot;echo -e  &quot;CPU:         $RED`lscpu&#39;grep &#39;Model name&#39;&#39;tr -s &#39; &#39;&#39;cut -d : -f2`$END&quot;echo -e  &quot;MEMORY:       $RED`free -h&#39;grep Mem&#39;tr -s &#39; &#39; : &#39;cut -d : -f2`$END&quot;echo -e  &quot;DISK:         $RED`lsblk &#39;grep &#39;^sd&#39; &#39;tr -s &#39; &#39; &#39;cut -d &quot; &quot; -f4`$END&quot;echo -e  &quot;$GREEN---------------------------------------------------------$END&quot;</code></pre><h3 id="每日将-x2F-etc-x2F-目录备份到-x2F-backup-x2F-etcYYYY-mm-dd中"><a href="#每日将-x2F-etc-x2F-目录备份到-x2F-backup-x2F-etcYYYY-mm-dd中" class="headerlink" title="每日将&#x2F;etc&#x2F;目录备份到&#x2F;backup&#x2F;etcYYYY-mm-dd中"></a>每日将&#x2F;etc&#x2F;目录备份到&#x2F;backup&#x2F;etcYYYY-mm-dd中</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-02#FileName：         backup.sh#URL:               www.yhtzjy.com#Description：      The test script                                                           #Copyright (C):     2021 All rights reserved#********************************************************************COLOR=&#39;echo -e \E[1;35m&#39;END=&#39;E[0m&#39;BACKUP=/backupSRC=/etcDATE=`date +%F`$&#123;COLOR&#125;Staring backup ...$ENDsleep 2cp -av $SRC $&#123;BACKUP&#125;/$&#123;SRC&#125;_$DATE$&#123;COLOR&#125;------Backup is finished-----$END</code></pre><h3 id="编写脚本-disk-sh，显示当前硬盘分区中空间利用率最大的值"><a href="#编写脚本-disk-sh，显示当前硬盘分区中空间利用率最大的值" class="headerlink" title="编写脚本 disk.sh，显示当前硬盘分区中空间利用率最大的值"></a>编写脚本 disk.sh，显示当前硬盘分区中空间利用率最大的值</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-05#FileName：         disk.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************CL=&quot;\033[1;33m&quot;END=&quot;\033[0m&quot;TLN=`df &#39;tr -s &#39; &#39; %&#39;cut -d% -f5 &#39;sort -nr&#39;head -n1`echo -e &quot;The largest rate used of disk partition is :$&#123;CL&#125;$&#123;TLN&#125;$&#123;END&#125;&quot;</code></pre><h3 id="编写脚本-links-sh，显示正连接本主机的每个远程主机的IPv4地址和连接数，并按连接数从大到小排"><a href="#编写脚本-links-sh，显示正连接本主机的每个远程主机的IPv4地址和连接数，并按连接数从大到小排" class="headerlink" title="编写脚本 links.sh，显示正连接本主机的每个远程主机的IPv4地址和连接数，并按连接数从大到小排"></a>编写脚本 links.sh，显示正连接本主机的每个远程主机的IPv4地址和连接数，并按连接数从大到小排</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-05#FileName：         links.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************BEGIN=&quot;\e[1;35m&quot;END=&quot;\e[0m&quot;echo -e &quot;$&#123;BEGIN&#125;`netstat -nat&#39;grep &#39;ESTAB&#39; &#39;tr -s &#39; &#39; &#39;:&#39; &#39;cut -d: -f6&#39;sort&#39;uniq -c&#39;sort -nr`$&#123;END&#125;&quot;</code></pre><h3 id="探测网络IP是否正常"><a href="#探测网络IP是否正常" class="headerlink" title="探测网络IP是否正常"></a>探测网络IP是否正常</h3><pre><code>#!/bin/bash# #********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-05#FileName：         Network_Testing.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************read -p &quot;please input the adress :&quot; ADDRESS                                                   if        ping -c2 -w2 $&#123;ADDRESS&#125; &amp;&gt; /dev/nullthen        echo &quot;$&#123;ADDRESS&#125; is up&quot;elif        grep -q &quot;$&#123;ADDRESS&#125;&quot; ~/maintenance.txtthen        echo &quot;$&#123;ADDRESS&#125; is undergoing maintenance&quot;else        echo &quot;station is unexpecedly DOWN!&quot;fi</code></pre><h3 id="if-else嵌套性试验（检测用户是否存在，存在即显示信息，否则询问是否创建此用户）"><a href="#if-else嵌套性试验（检测用户是否存在，存在即显示信息，否则询问是否创建此用户）" class="headerlink" title="if,else嵌套性试验（检测用户是否存在，存在即显示信息，否则询问是否创建此用户）"></a>if,else嵌套性试验（检测用户是否存在，存在即显示信息，否则询问是否创建此用户）</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang                                                #QQ:                1419946323#Date:              2021-07-07#FileName：         if_user.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************read -p &quot;Please input the username :&quot; NAMEINFO=&quot;echo `id $&#123;NAME&#125;`&quot;if        id $&#123;NAME&#125; &amp;&gt; /dev/nullthen        echo -e &quot;\033[1;32mThe user $&#123;NAME&#125; is exist,and $&#123;NAME&#125;&#39;s information:\n$&#123;INFO&#125;\033[0m&quot;else        echo -e &quot;The user $&#123;NAME&#125; dont exist &quot;        echo -e &quot;\033[1;31mI will crate the account $&#123;NAME&#125;,please choice &quot;yes&quot; or &quot;no&quot; \033[0m&quot;        read -p &quot;Please choice :&quot; YN        if                 [[ $&#123;YN&#125; =~ ^([Yy]&#39;[Ee]&#39;[Ss])$ ]];        then                useradd $&#123;NAME&#125;;                echo &quot;$&#123;NAME&#125;:123456&quot; &#39;chpasswd                chage -d1 $&#123;NAME&#125;                echo &quot;The default password is 123456 ,you must change your passwd next login (force)&quot;        else                echo -e &quot;\033[1;33mwill leave and exit!!!\033[0m&quot;        fifi</code></pre><h3 id="磁盘邮件预警"><a href="#磁盘邮件预警" class="headerlink" title="磁盘邮件预警"></a>磁盘邮件预警</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang                                                #QQ:                1419946323#Date:              2021-07-07#FileName：         Disk_alarm.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************WARNINFO=&quot;`df &#39;grep -E &#39;^/dev/sd*&#39; &#39;tr -s &#39; &#39; &#39;cut -d &#39; &#39; -f1,5,6 &#39;sort -nr -k2 &#39;head -n3`&quot;#LARSET=&quot;`df &#39;grep -E &#39;^/dev/sd*&#39; &#39;tr -s &#39; &#39; &#39;cut -d &#39; &#39; -f1,5,6 &#39;sort -nr -k2 &#39;head -n1`&quot;#LARSET=&quot;`echo $&#123;WARNINF&#125; &#39;tr -s &#39; &#39; &#39;%&#39; &#39;cut -d% -f2 &#39;sort -nr&#39;head -n1`&quot;VALURE=&quot;`echo $WARNINFO &#39;tr -s &#39;%&#39; &#39; &#39;&#39;sort -nr &#39;head -n1&#39;cut -d &#39; &#39; -f2 `&quot;if        [[ $VALURE -ge 10 ]]then        echo -e &quot;Your host&#39;s disk rate is more than 10%\n$&#123;WARNINFO&#125;&quot; &#39;mail -v -s &quot;disk_rate &quot; 949786521@qq.com        echo &quot;The rate is $&#123;VAlURE&#125; &quot;else        echo &quot;正常&quot;fi</code></pre><h3 id="在-x2F-etcdir目录下创建10个html文件，文件名格式为数字N（从1到10）加随机8个字母"><a href="#在-x2F-etcdir目录下创建10个html文件，文件名格式为数字N（从1到10）加随机8个字母" class="headerlink" title="在&#x2F;etcdir目录下创建10个html文件，文件名格式为数字N（从1到10）加随机8个字母"></a>在&#x2F;etcdir目录下创建10个html文件，文件名格式为数字N（从1到10）加随机8个字母</h3><pre><code>#!/bin/bash[ -d /etcdir ] &#39;&#39; mkdir /etcdircd /etcdirfor i in &#123;1..10&#125;;do                                                       touch $&#123;i&#125;`cat /dev/urandom &#39;tr -dc &#39;[[:alnum:]]&#39;&#39;head -c8`.htmldone</code></pre><h3 id="通过位置变量创建-Linux-系统账户及密码"><a href="#通过位置变量创建-Linux-系统账户及密码" class="headerlink" title="通过位置变量创建 Linux 系统账户及密码"></a>通过位置变量创建 Linux 系统账户及密码</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang                                                                                                                                             #QQ:                1419946323#Date:              2021-07-08#FileName：         user.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************useradd &quot;$1&quot;echo &quot;$1&quot; &#39;passwd --stdin &quot;$2&quot;</code></pre><h3 id="每周5凌晨3点使用-tar-命令备份-x2F-var-x2F-log-下的所有日志文件"><a href="#每周5凌晨3点使用-tar-命令备份-x2F-var-x2F-log-下的所有日志文件" class="headerlink" title="每周5凌晨3点使用 tar 命令备份&#x2F;var&#x2F;log 下的所有日志文件"></a>每周5凌晨3点使用 tar 命令备份&#x2F;var&#x2F;log 下的所有日志文件</h3><pre><code>#********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-08#FileName：         logbak.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************tar -czf log-`date +%F_%H_%M_%S`.tar.gz /var/log/#crontab -e  编写计划任务，执行备份脚本                                   #00 02 * * 5 /root/logbak.sh</code></pre><h3 id="实时监控本机内存和硬盘剩余空间，剩余内存小于-500M、根分区剩余空间小于-1000M时，发送报警邮件给-root-管理员"><a href="#实时监控本机内存和硬盘剩余空间，剩余内存小于-500M、根分区剩余空间小于-1000M时，发送报警邮件给-root-管理员" class="headerlink" title="实时监控本机内存和硬盘剩余空间，剩余内存小于 500M、根分区剩余空间小于 1000M时，发送报警邮件给 root 管理员"></a>实时监控本机内存和硬盘剩余空间，剩余内存小于 500M、根分区剩余空间小于 1000M时，发送报警邮件给 root 管理员</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-08#FileName：         waring_disk.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************#提取根分区剩余空间disk_size=`df -m / &#39;awk &#39;/\//&#123;print $4&#125;&#39;`mem_size=`free -m &#39;awk &#39;/Mem/&#123;print $4&#125;&#39;`#注意内存和磁盘提取空间的大小都是以kb为单位if [ $disk_size -le 512000 -a $mem_size -le 1024000 ];then    mail -s Waring root &lt;&lt; EOF    Insufficient resources ,资源不足                                                                                                                                    EOFfi</code></pre><h3 id="检测本机当前用户是否为超级管理员，如果是管理员，则使用-yum-安装-vsftpd，如果不是，则提示您非管理员"><a href="#检测本机当前用户是否为超级管理员，如果是管理员，则使用-yum-安装-vsftpd，如果不是，则提示您非管理员" class="headerlink" title="检测本机当前用户是否为超级管理员，如果是管理员，则使用 yum 安装 vsftpd，如果不是，则提示您非管理员"></a>检测本机当前用户是否为超级管理员，如果是管理员，则使用 yum 安装 vsftpd，如果不是，则提示您非管理员</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-10#FileName：         vsftpd.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************if [ $UID -eq 0 ];then    yum -y install vsftpdelse    echo &quot;Your are not an adminstartator,No Permissions to install software&quot;fi</code></pre><h3 id="编写脚本：提示用户输入用户名和密码，脚本自动创建相应的账户及配置密码。如果用户不输入账户名，则提示必须输入账户名并退出脚本；如果用户不输入密码，则统一使用默认的-123456-作为默认密码。"><a href="#编写脚本：提示用户输入用户名和密码，脚本自动创建相应的账户及配置密码。如果用户不输入账户名，则提示必须输入账户名并退出脚本；如果用户不输入密码，则统一使用默认的-123456-作为默认密码。" class="headerlink" title="编写脚本：提示用户输入用户名和密码，脚本自动创建相应的账户及配置密码。如果用户不输入账户名，则提示必须输入账户名并退出脚本；如果用户不输入密码，则统一使用默认的 123456 作为默认密码。"></a>编写脚本：提示用户输入用户名和密码，脚本自动创建相应的账户及配置密码。如果用户不输入账户名，则提示必须输入账户名并退出脚本；如果用户不输入密码，则统一使用默认的 123456 作为默认密码。</h3><pre><code>#!/bin/bash# #********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-10#FileName：         user.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************read -p &quot;请输入用户名: &quot; user#使用‐z 可以判断一个变量是否为空，如果为空，提示用户必须输入账户名，并退出脚本，退出码为 2 #没有输入用户名脚本退出后，使用$?查看的返回码为 2if [ -z $user ];then    echo &quot;您不需输入账户名&quot;    exit 2fi#使用 stty ‐echo 关闭 shell 的回显功能#使用 stty  echo 打开 shell 的回显功能stty -echoread -p &quot;请输入密码:&quot; passstty echopass=$&#123;pass:-123456&#125;useradd &quot;$user&quot;echo &quot;$pass&quot; &#39;passwd --stdin &quot;$user&quot; </code></pre><h3 id="编写脚本测试-192-168-4-0-x2F-24-整个网段中哪些主机处于开机状态，哪些主机处于关机状态（for-版本）"><a href="#编写脚本测试-192-168-4-0-x2F-24-整个网段中哪些主机处于开机状态，哪些主机处于关机状态（for-版本）" class="headerlink" title="编写脚本测试 192.168.4.0&#x2F;24 整个网段中哪些主机处于开机状态，哪些主机处于关机状态（for 版本）"></a>编写脚本测试 192.168.4.0&#x2F;24 整个网段中哪些主机处于开机状态，哪些主机处于关机状态（for 版本）</h3><pre><code>#!/bin/bash# #********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-11#FileName：         ping.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************for i in &#123;1..254&#125;;doping -f254 -c2 -i0.3 -w1 192.168.4.$i &amp;&gt;/dev/nullif [ $? -eq 0 ];then                                               echo &quot;192.168.0.$i is up&quot;elseecho &quot;192.168.0.$i is down&quot;fidone</code></pre><h3 id="编写脚本测试-192-168-4-0-x2F-24-整个网段中哪些主机处于开机状态，哪些主机处于关机状态（while-版本）"><a href="#编写脚本测试-192-168-4-0-x2F-24-整个网段中哪些主机处于开机状态，哪些主机处于关机状态（while-版本）" class="headerlink" title="编写脚本测试 192.168.4.0&#x2F;24 整个网段中哪些主机处于开机状态，哪些主机处于关机状态（while 版本）"></a>编写脚本测试 192.168.4.0&#x2F;24 整个网段中哪些主机处于开机状态，哪些主机处于关机状态（while 版本）</h3><pre><code>#!/bin/bash# #********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-11#FileName：         while.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************i=1while [ $i -le 254 ]do    ping -f254 -c2 -i0.3 -w1 192.168.4.$i &amp;&gt;/dev/null                  if [ $? -eq 0 ];then        echo &quot;192.168.4.$i is up&quot;    else        echo &quot;192.168.4.$i is down&quot;    fi    let i++done</code></pre><h3 id="统计-13-30-到-14-30-所有访问-apache-服务器的请求有多少个"><a href="#统计-13-30-到-14-30-所有访问-apache-服务器的请求有多少个" class="headerlink" title="统计 13:30 到 14:30 所有访问 apache 服务器的请求有多少个"></a>统计 13:30 到 14:30 所有访问 apache 服务器的请求有多少个</h3><pre><code>#URL:               www.yhtzjy.com#********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-11#FileName：         apache.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************#awk 使用‐F 选项指定文件内容的分隔符是/或者: #条件判断$7:$8 大于等于 13:30，并且要求，$7:$8 小于等于 14:30#最后使用 wc ‐l 统计这样的数据有多少行，即多少个#日志文档内容里面，第 1 列是远程主机的 IP 地址，使用 awk 单独显示第 1 列即可awk -F &quot;[ /:]&quot; &#39;$7&quot;:&quot;$8&gt;=&quot;13:30&quot; &amp;&amp; $7&quot;:&quot;$8&lt;=&quot;14:30&quot;&#123;print $1&#125;&#39; /var/log/httpd/access_log </code></pre><h3 id="统计当前-Linux-系统中可以登录计算机的账户有多少个"><a href="#统计当前-Linux-系统中可以登录计算机的账户有多少个" class="headerlink" title=". 统计当前 Linux 系统中可以登录计算机的账户有多少个"></a>. 统计当前 Linux 系统中可以登录计算机的账户有多少个</h3><pre><code>#!/bin/bash##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2021-07-11#FileName：         user.sh#URL:               www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************#方法 1:grep &quot;bash$&quot; /etc/passwd &#39;wc -l</code></pre><h3 id="curl检测网站的健康性"><a href="#curl检测网站的健康性" class="headerlink" title="curl检测网站的健康性"></a>curl检测网站的健康性</h3><p>[17:16:10 root@aliyun script]#bash curl.sh <a href="http://www.baidu.com/">www.baidu.com</a><br><a href="http://www.baidu.com/">www.baidu.com</a>  (Website It’s ok)</p><pre><code>[17:16:13 root@aliyun script]#vim curl.sh #!/bin/bashusage()&#123;    echo &quot;Usage:$0 url&quot;    exit 1&#125;checkurl()&#123;                                                                                                                                                                                                                                          local num=`curl -I -m 5 -s -w &quot;%&#123;http_code&#125;\n&quot; -o /dev/null $1 &#39;egrep &quot;(200&#39;301&#39;302)&quot;&#39;wc -l`    if [ $num -eq 1 ]    then         echo &quot;$1  (Website It&#39;s ok)&quot;    else         echo &quot;$1i (Website It&#39;s failed)&quot;    fi&#125;main()&#123;    if [ $# -ne 1 ]    then        usage    fi    checkurl $1&#125;main $*</code></pre><h3 id="mysql-linux定时杀掉sleep进程"><a href="#mysql-linux定时杀掉sleep进程" class="headerlink" title="mysql linux定时杀掉sleep进程"></a>mysql linux定时杀掉sleep进程</h3><pre><code>echo &quot;`date` killing mysql sleep process...&quot; &gt;&gt; /tmp/crontab.logfor id in `mysql -u root -pYourPassword, -e &quot;show processlist&quot;&#39;grep -i -E &#39;sleep&#39;locked&#39; &#39; awk &#39;&#123;if($6&gt;100)&#123;print $1&#125;&#125;&#39;`doecho &quot;killing pid $id&quot; &gt;&gt; /tmp/crontab.logecho `mysql -u root -pYourPassword, -e &quot;kill $id&quot;`done</code></pre>]]></content>
      
      
      <categories>
          
          <category> Shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix总结</title>
      <link href="/2021/08/27/zabbix%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/27/zabbix%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="zabbix官方的一句话描述zabbix："><a href="#zabbix官方的一句话描述zabbix：" class="headerlink" title="zabbix官方的一句话描述zabbix："></a>zabbix官方的一句话描述zabbix：</h2><ul><li><p>监视任何事情适用于任何IT基础架构，服务，应用程序和资源的解决方案</p></li><li><p>Monitor anythingSolutions for any kind of IT infrastructure, services, applications, resources</p></li><li><p>监控基础概论</p></li></ul><ol><li><p>zabbix并非监控，而是实现监控的工具</p></li><li><p>Zabbix-server是一个c&#x2F;s和b&#x2F;s结构</p></li><li><p>安装zabbbix的服务器安装时和php7.1有冲突：若此机器上已经安装php7.1就安装不上zabbix</p></li></ol><h3 id="为什么要使用监控？"><a href="#为什么要使用监控？" class="headerlink" title="为什么要使用监控？"></a>为什么要使用监控？</h3><p>1.对系统不间断实时监控</p><p>2.实时反馈系统当前状态</p><p>3.保证服务可靠性安全性</p><p>4.保证业务持续稳定运行</p><h2 id="我们去一家新的公司应该如何入手？"><a href="#我们去一家新的公司应该如何入手？" class="headerlink" title="我们去一家新的公司应该如何入手？"></a>我们去一家新的公司应该如何入手？</h2><p>1.硬件监控–路由器、交换机、防火墙</p><p>2.系统监控–cpu、内存、磁盘、网络、进程、tcp</p><p>3.服务监控–nginx、php、tomcat、redis、memcache、mysql</p><p>4.web监控–响应时间、加载时间、渲染时间</p><p>5.日志监控–ELK、（收集、存储、分析、展示）日志</p><p>6.安全监控–firewalld、WAF(nginx+lua)、安全宝、牛盾云、安全狗</p><h3 id="安装zabbix"><a href="#安装zabbix" class="headerlink" title="安装zabbix"></a>安装zabbix</h3><p>（单机）–&gt; LAMP</p><p>（架构）–&gt; LAP + MYSQL</p><p>服务端端口：10051</p><p>客户端端口：10050</p><p>Java-gateway：10052</p><h3 id="基础模板应该如何制作？"><a href="#基础模板应该如何制作？" class="headerlink" title="基础模板应该如何制作？"></a>基础模板应该如何制作？</h3><pre><code>1.编写脚本或者命令，能够获取指定监控对象的数据 并发连接2.在zabbix agent配置文件添加自定义监控项    指定key的名称和脚本路径    key在同一个zabbix agent不能重名    重启zabbix agent     UserParameter=redis_monitor[*],/bin/bash /etc/zabbix/zabbix_agentd.d/redis_monitor.sh $1 $2 $33.在zabbix server使用zabbix_get命令测试监控项能不能获取到数据    避免出现权限问题    数据格式问题    路径问题    # zabbix_get -s 172.31.0.106 -p 10050 -k &quot;redis_monitor[&quot;redis_status&quot;,&quot;6379&quot;,&quot;connected_clients&quot;]&quot;    4.在zabbix web界面创建模板或者创建监控项、如果已经有模板就直接把模板关联到指定主机5 配置触发器（邮件&#39;微信），用来报警6 宕机测试</code></pre><h3 id="zabbi-agent的主动模式被动模式"><a href="#zabbi-agent的主动模式被动模式" class="headerlink" title="zabbi-agent的主动模式被动模式"></a>zabbi-agent的主动模式被动模式</h3><ul><li><p>无论是主动模式还是被动模式都是站在zabbix-agent的角度来讲的</p></li><li><p>主动模式</p><blockquote><p>主动模式是由zabbix agent主动向zabbix server的10051端口发起tcp连接请求，因此主动模式下必须在zabbix</p></blockquote></li></ul><blockquote><p>agent配置文件中指定zabbix server的IP或者主机名(必须可以被解析为IP地址)，在连接到zabbix server之前<br>zabbix agent是不知道自己要采集那些数据以及间隔多久采集一次数据的，然后在连接到zabbix server以后获取到<br>自己的监控项和数据采集间隔周期时间，然后再根据监控项采集数据并返回给zabbix server，在主动模式下不再需<br>要zabbix serve向zabbix agent发起连接请求，因此主动模式在一定程度上可减轻zabbix server打开的本地随机端<br>口和进程数，在一定程度就减轻看zabbix server的压力。</p></blockquote><ul><li><p>被动模式</p><blockquote><p>被动模式的特点就是，在默认的被动模式下zabbix-agent什么都不做，zabbix-server什么时候发生什么事情，zabbix-agent就去采集什么数据，优点就是配置简单，安装就是被动模式，缺点就是数百上千台机器会导致zabbix-server轮训想每个zaibbix-agent发送数据采集指令，如果server负载过高可能导致不能及时获取到最新数据</p></blockquote></li></ul><blockquote><p>优点是配置简单<br>公司规模非常小的时候 ，几十个服务器  在被动模式下的模板直接使用就可以<br>    公司规模比较大的时候几百个服务器，这个时候决定使用主动还是被动，结合zabbix-proxy</p></blockquote><h3 id="zabbix-proxy-介绍"><a href="#zabbix-proxy-介绍" class="headerlink" title="zabbix-proxy 介绍"></a>zabbix-proxy 介绍</h3><blockquote><p>zabbix 作为一个分布式监控系统(分布式监控解决方案)，支持通过代理(proxy)收集zabbix agent的监控数据然后由    zabbix proxy再把数据发送给zabbix server，也就是zabbix proxy 可以代替 zabbix server 收集监控数据，然后把数据汇报给 zabbix server，所以zabbix proxy可以在一定程度上分担了zabbix server 的数据收集压力，从而降低了数据的采集时间、也相应的增加了zabbix server的监控能力。</p><p>zabbix 作为一个分布式监控系统(分布式监控解决方案)，支持通过代理(proxy)收集zabbix agent的监控数据然后由 zabbix proxy再把数据发送给zabbix server，也就是zabbix proxy 可以代替 zabbix server 收集监控数据，然后把数据汇报给 zabbix server，所以zabbix proxy可以在一定程度上分担了zabbix server 的数据收集压力，从而降低了数据的采集时间、也相应的增加了zabbix server的监控能力。</p></blockquote><p><strong>proxy主动模式和被动模式的区别</strong></p><blockquote><p>另外zabbix proxy也区分主动模式和被动模式，通信方式与zabbix server主动模式和被动模式一样，区别是zabbixproxy由于没有zabbix agent的配置，所以zabbix proxy在主动模式下要向zabbix server周期性的向zabbix server申请获取zabbix agent的监控项信息，但是zabbix proxy在被动模式下也是等待zabbix server的连接并接受zabbixserver发送的监控项指令，然后再有zabbix proxy向zabbix agent发起请求获取数据。- 另外zabbix proxy也区分主动模式和被动模式，通信方式与zabbix server主动模式和被动模式一样，区别是zabbixproxy由于没有zabbix agent的配置，所以zabbix proxy在主动模式下要向zabbix server周期性的向zabbix server申请获取zabbix agent的监控项信息，但是zabbix proxy在被动模式下也是等待zabbix server的连接并接受zabbixserver发送的监控项指令，然后再有zabbix proxy向zabbix agent发起请求获取数据。</p></blockquote><h1 id="被动模式的proxy"><a href="#被动模式的proxy" class="headerlink" title="被动模式的proxy"></a>被动模式的proxy</h1><p>server并不主动连接agent而是由proxy去替代server去连接，这样proxy相当于代理，每个proxy都有数据库，把agent返回的数据存在自己的数据库里。因为如果和server连接错误，数据会暂时放在proyx的数据里面，防止数据丢失。  等可以连接server之后就会主动放在server的数据库里面   这个是被动模式</p><h1 id="主动模式的proxy"><a href="#主动模式的proxy" class="headerlink" title="主动模式的proxy"></a>主动模式的proxy</h1><p>主动模式下 agent的配置文件 ServerActice&#x3D; 指向我的代理（proxy）  ，而且还要告诉proxy我的server是哪个  ，proxy才会把agent的数据传给server ，相互转发，<br>好处是缓解我们server的负载压力</p><h2 id="实战案例-监控-redis"><a href="#实战案例-监控-redis" class="headerlink" title="实战案例 监控 redis"></a>实战案例 监控 redis</h2><h1 id="zabbix最主要的就是自定义监控项获取数据，以及做模板等等"><a href="#zabbix最主要的就是自定义监控项获取数据，以及做模板等等" class="headerlink" title="zabbix最主要的就是自定义监控项获取数据，以及做模板等等"></a>zabbix最主要的就是自定义监控项获取数据，以及做模板等等</h1><p>正常redis的连接数1500 左右应该就没问题，如果在多可能就会造成服务器宕机的情况<br>学习一个模板中创建多个监控项、多个触发器和多个图形，在模板中创建监控项，创建图形<br>我们希望我们的redis内存，状态，连接数等等，一般都是通过命令行连接过去，然后输入info 查看我们的监控项。  </p><pre><code>#在zabbix-agent安装redis让我们的server去监控apt install redisgrep &quot;^bind&quot; /etc/redis/redis.confsed -ri &#39;s/bind 127.0.0.1/\bind 0.0.0.0/&#39; /etc/redis/redis.confsystemctl restart redis &amp;&amp; systemctl enable redis# 编辑监控redis的脚本,创建存放脚本的路径vim /etc/zabbix/zabbbix_agent.d/redis_monitor.sh#!/bin/bash#Author：Mr.yangredis_status()&#123;        R_PORT=$1        R_COMMAND=$2        (echo -en &quot;INFO \r\n&quot;;sleep 1;) &#39; ncat 127.0.0.1 &quot;$R_PORT&quot; &gt; /tmp/redis_&quot;$R_PORT&quot;.tmp        REDIS_STAT_VALUE=$(grep &quot;&quot;$R_COMMAND&quot;:&quot; /tmp/redis_&quot;$R_PORT&quot;.tmp &#39; cut -d &#39;:&#39; -f2)        echo $REDIS_STAT_VALUE&#125;help()&#123;        echo &quot;$&#123;0&#125; + redis_status + PORT + COMMAND&quot;&#125;main()&#123;        case $1 in redis_status)                redis_status $2 $3                        ;;                *)                        help                            ;;                esac&#125;main $1 $2 $3本机测试是否可以取到监控项cd /etc/zabbix/zabbix_agent.d/bash redis_monitor.sh redis_status 6379 used_memory#测试成功我们添加可执行权限chomod a+x redis_mointor.sh在配置文件添加脚本路径让我们的server可以执行远程命令vim /etc/zabbix/zabbix_agentd.confUserParameter=redis_monitor[*],/bin/bash /etc/zabbix/zabbix_agentd.d/redis_monitor.sh $1 $2 $3#在zabbix-server测试zabbix_get -s 10.0.0.12 -p 10050 -k &quot;redis_monitor[&quot;redis_status&quot;,&quot;6379&quot;,&quot;used_memory&quot;]&quot;然后我们就可以在web界面创建模板--创建应用集--创建监控项（key的值就是我们测试的key）--然后在创建图形查看监控项的值，后续如果还有redis的监控，我们就直接添加redis的模板就可以了</code></pre><h3 id="实战案例-监控memcached"><a href="#实战案例-监控memcached" class="headerlink" title="实战案例 监控memcached"></a>实战案例 监控memcached</h3><p>根据上面的案例我直接写了memcached的脚本，和监控redis一样的操作</p><pre><code>root@ubuntu1804:/etc/zabbix/zabbix_agentd.d# vim /etc/zabbix/zabbix_agentd.d/memcached_monitor.sh #!/bin/bash#Author:Mr.yangmemcached_status()&#123;        M_PORT=$1        M_COMMAND=$2        echo -e  &quot;stats\nquit&quot; &#39; ncat 127.0.0.1 &quot;$M_PORT&quot; &#39; grep &quot;STAT $M_COMMAND&quot; &#39;awk &#39;&#123;print $3&#125;&#39; #ubuntu使用ncat, 安装nmap&#125;main()&#123;        case $1 in          memcached_status)                memcached_status $2 $3                  ;;    esac&#125;main $1 $2 $3</code></pre>]]></content>
      
      
      <categories>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键安装tomcat和JDK</title>
      <link href="/2021/08/27/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85tomcat%E5%92%8CJDK/"/>
      <url>/2021/08/27/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85tomcat%E5%92%8CJDK/</url>
      
        <content type="html"><![CDATA[<pre><code>#!/bin/bash##********************************************************************#Author:        Mr.yang#QQ:            1419946323#Date:          2021-03-15#FileName：     install_tomcat.sh#URL:           http://www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************DIR=`pwd`JDK_FILE=&quot;jdk-8u281-linux-x64.tar.gz&quot;TOMCAT_FILE=&quot;apache-tomcat-8.5.68.tar.gz&quot;JDK_DIR=&quot;/usr/local&quot;TOMCAT_DIR=&quot;/usr/local&quot;color () &#123;    RES_COL=60    MOVE_TO_COL=&quot;echo -en \\033[$&#123;RES_COL&#125;G&quot;    SETCOLOR_SUCCESS=&quot;echo -en \\033[1;32m&quot;    SETCOLOR_FAILURE=&quot;echo -en \\033[1;31m&quot;    SETCOLOR_WARNING=&quot;echo -en \\033[1;33m&quot;    SETCOLOR_NORMAL=&quot;echo -en \E[0m&quot;    echo -n &quot;$2&quot; &amp;&amp; $MOVE_TO_COL    echo -n &quot;[&quot;    if [ $1 = &quot;success&quot; -o $1 = &quot;0&quot; ] ;then        $&#123;SETCOLOR_SUCCESS&#125;        echo -n $&quot;  OK  &quot;    elif [ $1 = &quot;failure&quot; -o $1 = &quot;1&quot;  ] ;then        $&#123;SETCOLOR_FAILURE&#125;        echo -n $&quot;FAILED&quot;    else        $&#123;SETCOLOR_WARNING&#125;        echo -n $&quot;WARNING&quot;    fi    $&#123;SETCOLOR_NORMAL&#125;    echo -n &quot;]&quot;    echo&#125;install_jdk()&#123;if !  [  -f &quot;$DIR/$JDK_FILE&quot; ];then    color 1 &quot;$JDK_FILE 文件不存在&quot;    exit; elif [ -d $JDK_DIR/jdk ];then    color 1  &quot;JDK 已经安装&quot;     exitelse     [ -d &quot;$JDK_DIR&quot; ] &#39;&#39; mkdir -pv $JDK_DIRfitar xvf $DIR/$JDK_FILE  -C $JDK_DIRcd  $JDK_DIR &amp;&amp; ln -s jdk1.8.* jdkcat &gt;  /etc/profile.d/jdk.sh &lt;&lt;EOFexport JAVA_HOME=$JDK_DIR/jdkexport JRE_HOME=\$JAVA_HOME/jreexport CLASSPATH=\$JAVA_HOME/lib/:\$JRE_HOME/lib/export PATH=\$PATH:\$JAVA_HOME/binEOF.  /etc/profile.d/jdk.shjava -version &amp;&amp; color 0 &quot;JDK 安装完成&quot; &#39;&#39; &#123; color 1  &quot;JDK 安装失败&quot; ; exit; &#125;&#125;install_tomcat()&#123;if ! [ -f &quot;$DIR/$TOMCAT_FILE&quot; ];then    color 1 &quot;$TOMCAT_FILE 文件不存在&quot;    exit; elif [ -d $TOMCAT_DIR/tomcat ];then    color 1 &quot;TOMCAT 已经安装&quot;     exitelse     [ -d &quot;$TOMCAT_DIR&quot; ] &#39;&#39; mkdir -pv $TOMCAT_DIRfitar xf $DIR/$TOMCAT_FILE -C $TOMCAT_DIRcd  $TOMCAT_DIR &amp;&amp; ln -s apache-tomcat-*/  tomcatecho &quot;PATH=$TOMCAT_DIR/tomcat/bin:&quot;&#39;$PATH&#39; &gt; /etc/profile.d/tomcat.shid tomcat &amp;&gt; /dev/null &#39;&#39; useradd -r -s /sbin/nologin tomcatcat &gt; $TOMCAT_DIR/tomcat/conf/tomcat.conf &lt;&lt;EOFJAVA_HOME=$JDK_DIR/jdkEOFchown -R tomcat.tomcat $TOMCAT_DIR/tomcat/cat &gt; /lib/systemd/system/tomcat.service  &lt;&lt;EOF[Unit]Description=Tomcat#After=syslog.target network.target remote-fs.target nss-lookup.targetAfter=syslog.target network.target[Service]Type=forkingEnvironmentFile=$TOMCAT_DIR/tomcat/conf/tomcat.confExecStart=$TOMCAT_DIR/tomcat/bin/startup.shExecStop=$TOMCAT_DIR/tomcat/bin/shutdown.shRestartSec=3PrivateTmp=trueUser=tomcatGroup=tomcat[Install]WantedBy=multi-user.targetEOFsystemctl daemon-reloadsystemctl enable --now tomcat.service &amp;&gt; /dev/nullsystemctl is-active tomcat.service &amp;&gt; /dev/null &amp;&amp;  color 0 &quot;TOMCAT 安装完成&quot; &#39;&#39; &#123; color 1 &quot;TOMCAT 安装失败&quot; ; exit; &#125;&#125;install_jdk  install_tomcat</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键搭建LNMP</title>
      <link href="/2021/08/27/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BALNMP/"/>
      <url>/2021/08/27/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BALNMP/</url>
      
        <content type="html"><![CDATA[<ul><li>未避免网络相关问题，此脚本基于离线安装</li><li>脚本只对nginx、php-fpm做了基础优化，还请根据自己的需求修改相关配置文件</li><li>重新登陆后可以使用nginx,mysql,php-fpm等命令</li><li>关于https，nginx配置文件中已经做了全站https的代码，只是被注释了，请根据自己的域名、证书修改以下配置文件：</li><li>&#x2F;apps&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</li></ul><h2 id="系统环境要求："><a href="#系统环境要求：" class="headerlink" title="系统环境要求："></a>系统环境要求：</h2><ol><li>没有安装过nginx、mysql、php软件以及apache、mariadb</li><li>没有相关软件生成的文件残留</li><li>未创建nginx，mysql用户</li></ol><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a><strong>建议</strong></h3><pre><code>脚本跑完后，第一次使用域名访问以完成wordpress安装，域名会被记录到数据库中，以后如果更换域名，只要重新做域名解析即可。若第一次使用IP访问，浏览器地址会显示IP地址而不是域名，更换域名及IP都需要手动对数据库修改，因此不建议使用IP访问安装wordpress。</code></pre><p>下载源码包<br>nginx –1.18.0<br>mysql–5.7.34<br>php–7.4.21<br>openssl–1.1.1k<br>wordpress–5.7.2</p><pre><code>#!/bin/bash#SRC_DIR=&#39;/usr/local/src/&#39;NGINX=&#39;nginx-1.18.0.tar.gz&#39;MYSQL=&#39;mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz&#39;PHP=&#39;php-7.4.21.tar.xz&#39;APP=&#39;wordpress-5.7.2-zh_CN.tar.gz&#39;OPENSSL=&#39;openssl-1.1.1k.tar.gz&#39;COLOR=&quot;echo -e \\033[01;31m&quot;END=&#39;\033[0m&#39;MYSQL_ROOT_PASSWORD=RedHat@123MYSQL_WORDPRESS_PASSWORD=wordpressCPU=`lscpu&#39; awk &#39;/^CPU\(s\):/&#123;print $NF&#125;&#39;`$&#123;COLOR&#125;&#39;开始安装基于LNMP的wordpress&#39;$ENDsleep 1check_file()&#123;yum repolist &#39; grep -i epel &amp;&gt; /dev/null;[ $? -ne 0 ] &amp;&amp; &#123; $&#123;COLOR&#125;&#39;需要开启epel源&#39;$END;exit; &#125;$COLOR&quot;请将相关文件放在$&#123;SRC_DIR&#125;目录下&quot;$ENDcd $SRC_DIRif [ ! -e $NGINX ];then    $COLOR&quot;缺少$&#123;NGINX&#125;文件&quot;$END    exit    elif [ ! -e $MYSQL ];then        $COLOR&quot;缺少$&#123;MYSQL&#125;文件&quot;$END        exit    elif [ ! -e $PHP ];then        $COLOR&quot;缺少$&#123;PHP&#125;文件&quot;$END        exit    elif [ ! -e $APP ];then        $COLOR&quot;缺少$&#123;APP&#125;文件&quot;$END        exit    elif [ ! -e $OPENSSL ];then        $COLOR&quot;缺少$&#123;OPENSSL&#125;文件&quot;$END        exit    else        $COLOR&quot;相关文件已准备好&quot;$ENDfi&#125; install_mysql()&#123;    $COLOR&quot;开始安装MySQL数据库&quot;$END    tar xf $MYSQL -C $SRC_DIR    if [ -e /usr/local/mysql ];then        $COLOR&quot;数据库已存在，安装失败&quot;$END        exit    fi    local MYSQL_DIR=`echo $MYSQL&#39; sed -nr &#39;s/^(.*[0-9]).*/\1/p&#39;`    ln -s  $&#123;SRC_DIR&#125;$&#123;MYSQL_DIR&#125; /usr/local/mysql    id mysql &amp;&gt; /dev/null &#39;&#39; &#123; groupadd -g 306 mysql;useradd -u 306 -s /sbin/nologin -g mysql -r  mysql;$COLOR&quot;创建mysql用户&quot;$END; &#125;    yum  -y -q install numactl-libs ncurses-compat-libs libaio &amp;&gt; /dev/null    echo &#39;PATH=/usr/local/mysql/bin/:$PATH&#39; &gt; /etc/profile.d/mysql.sh    source /etc/profile.d/mysql.sh    mkdir /etc/my.cnf.d    cat &gt; /etc/my.cnf &lt;&lt;EOF[mysqld]server-id=1basedir=/usrdatadir=/data/mysqlsocket=/data/mysql/mysql.socklog-error=/data/mysql/mysql.logpid-file=/data/mysql/mysql.pidcharacter-set-server=utf8mb4log-bin[mysql]default-character-set=utf8mb4[client]socket=/data/mysql/mysql.sock!includedir /etc/my.cnf.dEOF    cat &gt; /usr/lib/systemd/system/mysqld.service &lt;&lt;EOF[Unit]Description=MySQL ServerDocumentation=man:mysqld(8)After=network.targetAfter=syslog.target[Install]WantedBy=multi-user.target[Service]User=mysqlGroup=mysqlType=forkingTimeoutSec=0PermissionsStartOnly=trueExecStart=/usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --daemonizeLimitNOFILE = 65536Restart=on-failureRestartPreventExitStatus=1PrivateTmp=trueEOF    [ -d /data/ ] &#39;&#39; mkdir /data     /usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --datadir=/data/mysql    systemctl daemon-reload &amp;&amp; systemctl enable --now mysqld    [ $? -ne 0 ] &amp;&amp; &#123; $COLOR&quot;数据库启动失败，退出!&quot;$END;exit; &#125;    mysqladmin -uroot password $MYSQL_ROOT_PASSWORD &amp;&gt;/dev/null    $COLOR&quot;数据库安装完成&quot;$END&#125;install_nginx()&#123;    $&#123;COLOR&#125;&quot;开始安装NGINX&quot;$END    cd $SRC_DIR    id nginx  &amp;&gt; /dev/null &#39;&#39; &#123; groupadd -g 80 nginx;useradd -u 80 -s /sbin/nologin -g 80 -r nginx;$COLOR&quot;创建nginx用户&quot;$END; &#125;    $COLOR&quot;安装nginx相关包&quot;$END    yum -q -y install gcc gcc-c++ pcre pcre-devel pcre pcre-devel zlib zlib-devel automake make &amp;&gt; /dev/null    tar xf $NGINX -C $SRC_DIR    NGINX_DIR=`echo $NGINX&#39; sed -nr &#39;s/^(.*[0-9]).*/\1/p&#39;`    tar xf $OPENSSL -C $SRC_DIR    OPENSSL_DIR=`echo $OPENSSL &#39; sed -nr &#39;s/^(.*).tar.gz/\1/p&#39;`    cd $NGINX_DIR    ./configure --prefix=/apps/nginx \    --user=nginx \    --group=nginx \    --with-http_ssl_module \    --with-http_v2_module \    --with-http_realip_module \    --with-http_stub_status_module \    --with-http_gzip_static_module \    --with-pcre \    --with-stream \    --with-stream_ssl_module \    --with-stream_realip_module \    --with-file-aio \    --with-threads \    --with-openssl=$&#123;SRC_DIR&#125;$&#123;OPENSSL_DIR&#125;   make -j $CPU &amp;&amp; make install    [ $? -eq 0 ] &amp;&amp; $COLOR&quot;NGINX编译安装成功&quot;$END &#39;&#39; &#123; $COLOR&quot;NGINX编译安装失败,退出!&quot;$END;exit; &#125;   [ -d /data/nginx ] &#39;&#39; mkdir -pv /data/nginx/   cat &gt; /apps/nginx/conf/nginx.conf &lt;&lt;EOFuser  nginx nginx;#工作进程数量，与cpu核心一致worker_processes  auto;#CPU亲缘性绑定worker_cpu_affinity  auto;error_log  /apps/nginx/logs/error.log  error;pid        logs/nginx.pid;worker_priority  0;#打开的最大文件数，应与`ulimit -n`一致worker_rlimit_nofile  65536;#线程池thread_pool pool1 threads=32 max_queue=65536;events &#123;    #单个工作进程的最大并发连接数    worker_connections  65536;    #使用epoll事件驱动    use epoll;    #同一时刻一个请求轮流由work进程处理，避免&quot;惊群&quot;    accept_mutex  on;    #工作进程开启同时接受多个新的网络连接    multi_accept  on;&#125;http &#123;    include       mime.types;    default_type  application/octet-stream;    #自定义json日志格式    log_format access_json &#39;&#123;&quot;@timestamp&quot;:&quot;\$time_iso8601&quot;,&#39;        &#39;&quot;host&quot;:&quot;\$server_addr&quot;,&#39;        &#39;&quot;clientip&quot;:&quot;\$remote_addr&quot;,&#39;        &#39;&quot;size&quot;:\$body_bytes_sent,&#39;        &#39;&quot;responsetime&quot;:\$request_time,&#39;        &#39;&quot;upstreamtime&quot;:&quot;\$upstream_response_time&quot;,&#39;        &#39;&quot;upstreamhost&quot;:&quot;\$upstream_addr&quot;,&#39;        &#39;&quot;http_host&quot;:&quot;\$host&quot;,&#39;        &#39;&quot;uri&quot;:&quot;\$uri&quot;,&#39;        &#39;&quot;domain&quot;:&quot;\$host&quot;,&#39;        &#39;&quot;xff&quot;:&quot;\$http_x_forwarded_for&quot;,&#39;        &#39;&quot;referer&quot;:&quot;\$http_referer&quot;,&#39;        &#39;&quot;tcp_xff&quot;:&quot;\$proxy_protocol_addr&quot;,&#39;        &#39;&quot;http_user_agent&quot;:&quot;\$http_user_agent&quot;,&#39;        &#39;&quot;status&quot;:&quot;\$status&quot;&#125;&#39;;    #零拷贝，加快静态文件传输    sendfile        on;    #合并请求后统一发送给客户端,需开启sendfile    tcp_nopush     on;    #异步IO    aio threads=pool1;    directio 4m;    directio_alignment 512;    #开启与客户端长连接    keepalive_timeout  65;    keepalive_requests 500;    #立即发送相应报文    tcp_nodelay     on;    #开启与后端fastcgi服务器长连接    fastcgi_keep_conn on;    #开启压缩    gzip  on;    gzip_comp_level 9;    gzip_min_length 1k;    gzip_types text/plain application/javascript application/x-javascript    text/cssapplication/xml text/javascript application/x-httpd-php image/jpeg    image/gif image/png;    gzip_vary on;    #响应报文隐藏后端服务器    fastcgi_hide_header X-Powered-By;    #响应报文隐藏nginx版本    server_tokens off;    server &#123;        server_name www.75j.xyz;        listen 80;        root /data/nginx/wordpress;        index index.php;        charset utf-8;        access_log /apps/nginx/logs/access_json.log access_json;        client_max_body_size 20m;        ##ssl证书相关        #listen 443 ssl;        #ssl_certificate /apps/nginx/www.75j.xyz.pem;        #ssl_certificate_key /apps/nginx/www.75j.xyz.key;        #ssl_session_cache shared:SSL:10m;        #ssl_session_timeout 5m;        ##HSTS 浏览器自己改写http请求为https，而不是先发送http，然后重定向到https        #add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;;        ##非http请求重写为https请求        #if (\$scheme = http)&#123;        #    rewrite ^/(.*)$ https://www.75j.xyz/\$1 permanent;        #&#125;        ##防盗链        #valid_referers none blocked server_names        #    *.75j.xyz www.75j.xyz\/*        #    ~\.baidu\.;        #if (\$invalid_referer) &#123;        #    return 403;        #&#125;        #仅允许GET        location / &#123;            limit_except GET &#123;            deny all;            &#125;        &#125;        #动静分离        location ~ .*\.(gif&#39;jpg&#39;jpeg&#39;png&#39;bmp&#39;swf&#39;js&#39;css&#39;tiff&#39;tif&#39;wmf&#39;ico)$ &#123;            #root /data/static            expires      365d;        &#125;        #与php服务器使用fastcgi连接        location ~ \.php$ &#123;            fastcgi_pass 127.0.0.1:9000;            fastcgi_send_timeout 30;            fastcgi_read_timeout 30;            fastcgi_index index.php;            fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;            include fastcgi_params;        &#125;        location = /favicon.ico &#123;            root /data/nginx/wordpress;        &#125;        #禁止访问密码等敏感数据文件        location ~ ^/(\.user.ini&#39;\.htaccess&#39;\.git&#39;\.svn&#39;\.project&#39;LICENSE&#39;README.md) &#123;            return 404;        &#125;        #nginx状态页        location /nginx_status &#123;            access_log off;            allow 127.0.0.1;            stub_status;        &#125;        #php状态页        location ~ ^/(pm_status&#39;ping)$ &#123;            access_log off;            allow 127.0.0.1;            deny all;            fastcgi_pass 127.0.0.1:9000;            fastcgi_param PATH_TRANSLATED \$document_root\$fastcgi_script_name;            include fastcgi_params;        &#125;        error_page   500 502 503 504  /50x.html;        location = /50x.html &#123;            root   html;        &#125;    &#125;&#125;EOF    echo  &#39;PATH=/apps/nginx/sbin:$PATH&#39; &gt;&gt; /etc/profile.d/nginx.sh    cat &gt; /usr/lib/systemd/system/nginx.service &lt;&lt;EOF[Unit]Description=The nginx HTTP and reverse proxy serverAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/apps/nginx/logs/nginx.pidExecStartPre=/usr/bin/rm -f /apps/nginx/logs/nginx.pidExecStartPre=/apps/nginx/sbin/nginx -tExecStart=/apps/nginx/sbin/nginxExecReload=/bin/kill -s HUPKillSignal=SIGQUITTimeoutStopSec=5KillMode=mixedPrivateTmp=true[Install]WantedBy=multi-user.targetEOF    systemctl daemon-reload    systemctl enable --now nginx     systemctl is-active nginx &amp;&gt; /dev/null &#39;&#39;  &#123; $COLOR&quot;NGINX 启动失败,退出!&quot;$END ; exit; &#125;    $COLOR&quot;NGINX安装完成&quot;&#125;install_php()&#123;    $&#123;COLOR&#125;&quot;开始安装PHP&quot;$END    yum -y install gcc openssl-devel libxml2-devel bzip2-devel libmcrypt-devel sqlite-devel oniguruma-devel autoconf libpng-devel libjpeg-devel    cd $SRC_DIR    tar xf $PHP    PHP_DIR=`echo $PHP&#39; sed -nr &#39;s/^(.*[0-9]).*/\1/p&#39;`    cd $PHP_DIR    ./configure \    --prefix=/apps/php \    --with-fpm-user=nginx \    --with-fpm-group=nginx \    --enable-mysqlnd \    --with-mysqli=mysqlnd \    --with-pdo-mysql=mysqlnd \    --with-openssl \    --with-zlib \    --enable-mbstring \    --enable-xml \    --enable-sockets \    --enable-fpm \    --enable-maintainer-zts \    --with-jpeg \    --disable-fileinfo \    --enable-opcache \    --enable-gd \    --with-config-file-path=/apps/php/etc    make -j $CPU &amp;&amp; make install     [ $? -eq 0 ] &amp;&amp; $COLOR&quot;PHP编译安装成功&quot;$END &#39;&#39;  &#123; $COLOR&quot;PHP编译安装失败,退出!&quot;$END;exit; &#125;    cat &gt; /apps/php/etc/php-fpm.d/www.conf&lt;&lt;EOF[www]user = nginxgroup = nginxlisten = 127.0.0.1:9000listen.allowed_clients = 127.0.0.1pm = dynamicpm.max_children = 50pm.start_servers = 10pm.min_spare_servers = 1pm.max_spare_servers = 20pm.max_requests = 1000pm.status_path = /pm_statusping.path = /pingping.response = pongEOF    cp php.ini-production  /apps/php/etc/php.ini    sed -i -r &#39;s/(upload_max_filesize =).*/\1 20M/&#39; /apps/php/etc/php.ini    sed -i -r &#39;s/^(expose_php =) On/\1 Off/&#39; /apps/php/etc/php.ini    echo -e &#39;opcache.enable=1\nzend_extension=opcache.so&#39; &gt;&gt; /apps/php/etc/php.ini    echo &#39;PATH=/apps/php/bin/:/apps/php/sbin/:$PATH&#39; &gt; /etc/profile.d/php-fpm.sh    cp  sapi/fpm/php-fpm.service /usr/lib/systemd/system/    cp  /apps/php/etc/php-fpm.conf.default  /apps/php/etc/php-fpm.conf    systemctl daemon-reload    systemctl start php-fpm     systemctl is-active  php-fpm &amp;&gt; /dev/null &#39;&#39;  &#123; $COLOR&quot;PHP-FPM 启动失败,退出!&quot;$END ; exit; &#125;    $COLOR&quot;PHP安装完成&quot;&#125;install_wordpress()&#123;    cd $SRC_DIR    tar xf $APP  -C /data/nginx    chown -R nginx.nginx /data/nginx    cd /data/nginx/wordpress    cp wp-config-sample.php wp-config.php    mysql -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot; \    -e &quot;create database wordpress;\    create user wordpress@&#39;127.0.0.1&#39; identified by &#39;$MYSQL_WORDPRESS_PASSWORD&#39;;\    grant all on wordpress.* to wordpress@&#39;127.0.0.1&#39;;&quot; &amp;&gt;/dev/null    sed -i -e &#39;s/database_name_here/wordpress/&#39; \    -e &#39;s/username_here/wordpress/&#39; \    -e &quot;s/password_here/$MYSQL_WORDPRESS_PASSWORD/&quot; \    -e &#39;s/localhost/127.0.0.1/&#39;  wp-config.php    $COLOR&quot;WORDPRESS安装完成&quot;&#125;check_fileinstall_mysqlinstall_nginxinstall_phpinstall_wordpress</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线编译安装nginx脚本</title>
      <link href="/2021/08/27/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/08/27/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<pre><code>#!/bin/bash                                                                                                                                                                ##********************************************************************#Author:            Mr.yang#QQ:                1419946323#Date:              2020-12-01#FileName：         install_nginx.sh#URL:               http://www.yhtzjy.com#Description：      The test script#Copyright (C):     2021 All rights reserved#********************************************************************SRC_DIR=/usr/local/srcNGINX_URL=http://nginx.org/download/NGINX_FILE=nginx-1.18.0TAR=.tar.gzNGINX_INSTALL_DIR=/apps/nginxCPUS=`lscpu &#39;awk &#39;/^CPU\(s\)/&#123;print $2&#125;&#39;`color () &#123;    RES_COL=60    MOVE_TO_COL=&quot;echo -en \\033[$&#123;RES_COL&#125;G&quot;    SETCOLOR_SUCCESS=&quot;echo -en \\033[1;32m&quot;    SETCOLOR_FAILURE=&quot;echo -en \\033[1;31m&quot;    SETCOLOR_WARNING=&quot;echo -en \\033[1;33m&quot;    SETCOLOR_NORMAL=&quot;echo -en \E[0m&quot;    echo -n &quot;$1&quot; &amp;&amp; $MOVE_TO_COL    echo -n &quot;[&quot;    if [ $2 = &quot;success&quot; -o $2 = &quot;0&quot; ] ;then        $&#123;SETCOLOR_SUCCESS&#125;        echo -n $&quot;  OK  &quot;        elif [ $2 = &quot;failure&quot; -o $2 = &quot;1&quot;  ] ;then        $&#123;SETCOLOR_FAILURE&#125;        echo -n $&quot;FAILED&quot;    else        $&#123;SETCOLOR_WARNING&#125;        echo -n $&quot;WARNING&quot;    fi    $&#123;SETCOLOR_NORMAL&#125;    echo -n &quot;]&quot;    echo &#125;os_type () &#123;   awk -F&#39;[ &quot;]&#39; &#39;/^NAME/&#123;print $2&#125;&#39; /etc/os-release&#125;os_version () &#123;   awk -F&#39;&quot;&#39; &#39;/^VERSION_ID/&#123;print $2&#125;&#39; /etc/os-release&#125;check () &#123;    [ -e $&#123;NGINX_INSTALL_DIR&#125; ] &amp;&amp; &#123; color &quot;nginx 已安装,请卸载后再安装&quot; 1; exit; &#125;    cd  $&#123;SRC_DIR&#125;    if [  -e $&#123;NGINX_FILE&#125;$&#123;TAR&#125; ];then        color &quot;相关文件已准备好&quot; 0    else        color &#39;开始下载 nginx 源码包&#39; 0        wget $&#123;NGINX_URL&#125;$&#123;NGINX_FILE&#125;$&#123;TAR&#125;         [ $? -ne 0 ] &amp;&amp; &#123; color &quot;下载 $&#123;NGINX_FILE&#125;$&#123;TAR&#125;文件失败&quot; 1; exit; &#125;     fi&#125; install () &#123;    color &quot;开始安装 nginx&quot; 0    if id nginx  &amp;&gt; /dev/null;then        color &quot;nginx 用户已存在&quot; 1     else        useradd -s /sbin/nologin -r  nginx        color &quot;创建 nginx 用户&quot; 0                            fi    color &quot;开始安装 nginx 依赖包&quot; 0    if [ `os_type` == &quot;CentOS&quot; -a `os_version` == &#39;8&#39; ] ;then        yum -y -q install make gcc-c++ libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel perl-ExtUtils-Embed     elif [ `os_type` == &quot;CentOS&quot; -a `os_version` == &#39;7&#39; ];then        yum -y -q  install make gcc pcre-devel openssl-devel zlib-devel perl-ExtUtils-Embed    else        apt update &amp;&gt; /dev/null        apt -y install make gcc libpcre3 libpcre3-dev openssl libssl-dev zlib1g-dev &amp;&gt; /dev/null    fi    cd $SRC_DIR    tar xf $&#123;NGINX_FILE&#125;$&#123;TAR&#125;    NGINX_DIR=`echo $&#123;NGINX_FILE&#125;$&#123;TAR&#125;&#39; sed -nr &#39;s/^(.*[0-9]).*/\1/p&#39;`    cd $&#123;NGINX_DIR&#125;    ./configure --prefix=$&#123;NGINX_INSTALL_DIR&#125; --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-stream --with-stream_ssl_module --with-stream_realip_module     make -j $CPUS &amp;&amp; make install     [ $? -eq 0 ] &amp;&amp; color &quot;nginx 编译安装成功&quot; 0 &#39;&#39;  &#123; color &quot;nginx 编译安装失败,退出!&quot; 1 ;exit; &#125;    echo &quot;PATH=$&#123;NGINX_INSTALL_DIR&#125;/sbin:$&#123;PATH&#125;&quot; &gt; /etc/profile.d/nginx.sh    cat &gt; /lib/systemd/system/nginx.service &lt;&lt;EOF[Unit]Description=The nginx HTTP and reverse proxy serverAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=$&#123;NGINX_INSTALL_DIR&#125;/logs/nginx.pidExecStartPre=/bin/rm -f $&#123;NGINX_INSTALL_DIR&#125;/logs/nginx.pidExecStartPre=$&#123;NGINX_INSTALL_DIR&#125;/sbin/nginx -tExecStart=$&#123;NGINX_INSTALL_DIR&#125;/sbin/nginxExecReload=/bin/kill -s HUP \$MAINPIDKillSignal=SIGQUITTimeoutStopSec=5KillMode=processPrivateTmp=true [Install]WantedBy=multi-user.targetEOF    ln -s /apps/nginx/sbin/nginx /usr/sbin/    systemctl daemon-reload    systemctl enable --now nginx &amp;&gt; /dev/null     systemctl is-active nginx &amp;&gt; /dev/null &#39;&#39;  &#123; color &quot;nginx 启动失败,退出!&quot; 1 ; exit; &#125;    color &quot;nginx 安装完成&quot; 0&#125;checkinstall       </code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线编译安装redis</title>
      <link href="/2021/08/27/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85redis/"/>
      <url>/2021/08/27/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85redis/</url>
      
        <content type="html"><![CDATA[<pre><code>#!/bin/bash##********************************************************************#Author:        Mr.yang#QQ:            1419946323#Date:          2020-02-22#FileName：      install_redis_for_centos.sh#URL:           http://www.yhtzjy.com#Description：       The test script#Copyright (C):     2020 All rights reserved#********************************************************************. /etc/init.d/functions VERSION=redis-4.0.14PASSWORD=123456INSTALL_DIR=/apps/redisinstall() &#123;yum  -y install gcc jemalloc-devel &#39;&#39; &#123; action &quot;安装软件包失败，请检查网络配置&quot; false ; exit; &#125;wget http://download.redis.io/releases/$&#123;VERSION&#125;.tar.gz &#39;&#39; &#123; action &quot;Redis 源码下载失败&quot; false ; exit; &#125;tar xf $&#123;VERSION&#125;.tar.gzcd $&#123;VERSION&#125;make -j 4 PREFIX=$&#123;INSTALL_DIR&#125; install &amp;&amp; action &quot;Redis 编译安装完成&quot; &#39;&#39; &#123; action &quot;Redis 编译安装失败&quot; false ;exit ; &#125;ln -s $&#123;INSTALL_DIR&#125;/bin/redis-*  /usr/bin/mkdir -p $&#123;INSTALL_DIR&#125;/&#123;etc,log,data,run&#125;cp redis.conf  $&#123;INSTALL_DIR&#125;/etc/sed -i -e &#39;s/bind 127.0.0.1/bind 0.0.0.0/&#39;  -e &quot;/# requirepass/a requirepass $PASSWORD&quot;  -e &quot;/^dir .*/c dir $&#123;INSTALL_DIR&#125;/data/&quot;  -e &quot;/logfile .*/c logfile $&#123;INSTALL_DIR&#125;/log/redis-6379.log&quot;  -e  &quot;/^pidfile .*/c  pidfile $&#123;INSTALL_DIR&#125;/run/redis_6379.pid&quot; $&#123;INSTALL_DIR&#125;/etc/redis.confif id redis &amp;&gt; /dev/null ;then     action &quot;Redis 用户已存在&quot; false  else    useradd -r -s /sbin/nologin redis    action &quot;Redis 用户创建成功&quot;fichown -R redis.redis $&#123;INSTALL_DIR&#125;cat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOFnet.core.somaxconn = 1024vm.overcommit_memory = 1EOFsysctl -p echo &#39;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#39; &gt;&gt; /etc/rc.d/rc.localchmod +x /etc/rc.d/rc.local/etc/rc.d/rc.localcat &gt; /usr/lib/systemd/system/redis.service &lt;&lt;EOF[Unit]Description=Redis persistent key-value databaseAfter=network.target[Service]ExecStart=$&#123;INSTALL_DIR&#125;/bin/redis-server $&#123;INSTALL_DIR&#125;/etc/redis.conf --supervised systemdExecStop=/bin/kill -s QUIT \$MAINPID#Type=notifyUser=redisGroup=redisRuntimeDirectory=redisRuntimeDirectoryMode=0755[Install]WantedBy=multi-user.targetEOFsystemctl daemon-reload systemctl enable --now  redis &amp;&gt; /dev/null &amp;&amp; action &quot;Redis 服务启动成功,Redis信息如下:&quot; &#39;&#39; &#123; action &quot;Redis 启动失败&quot; false ;exit; &#125; redis-cli -a $PASSWORD INFO Server 2&gt; /dev/null&#125;install </code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于key验证通用脚本</title>
      <link href="/2021/08/27/%E5%9F%BA%E4%BA%8Ekey%E9%AA%8C%E8%AF%81%E9%80%9A%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/08/27/%E5%9F%BA%E4%BA%8Ekey%E9%AA%8C%E8%AF%81%E9%80%9A%E7%94%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<pre><code>##********************************************************************#Author:        Mr.yang#QQ:            29308620#Date:          2020-11-15#FileName：     ssh_keygen.sh#URL:           http://www.yhtzjy.com#Description：      The test script#Copyright (C):     2020 All rights reserved#********************************************************************PASS=123456#设置网段最后的地址，4-255之间，越小扫描越快END=254IP=`ip a s eth0 &#39; awk -F&#39;[ /]+&#39; &#39;NR==3&#123;print $3&#125;&#39;`NET=$&#123;IP%.*&#125;.rm -f /root/.ssh/id_rsa[ -e ./SCANIP.log ] &amp;&amp; rm -f SCANIP.logfor((i=3;i&lt;=&quot;$END&quot;;i++));doping -c 1 -w 1  $&#123;NET&#125;$i &amp;&gt; /dev/null  &amp;&amp; echo &quot;$&#123;NET&#125;$i&quot; &gt;&gt; SCANIP.log &amp;donewaitssh-keygen -P &quot;&quot; -f /root/.ssh/id_rsarpm -q sshpass &#39;&#39; yum -y install sshpasssshpass -p $PASS ssh-copy-id -o StrictHostKeyChecking=no $IP AliveIP=(`cat SCANIP.log`)for n in $&#123;AliveIP[*]&#125;;dosshpass -p $PASS scp -o StrictHostKeyChecking=no -r /root/.ssh root@$&#123;n&#125;:done#把.ssh/known_hosts拷贝到所有主机，使它们第一次互相访问时不需要输入回车for n in $&#123;AliveIP[*]&#125;;doscp /root/.ssh/known_hosts $&#123;n&#125;:.ssh/done</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过haproxy实现 harbor 高可用</title>
      <link href="/2021/08/27/%E9%80%9A%E8%BF%87haproxy%E5%AE%9E%E7%8E%B0%20harbor%20%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>/2021/08/27/%E9%80%9A%E8%BF%87haproxy%E5%AE%9E%E7%8E%B0%20harbor%20%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Harbor简介"><a href="#Harbor简介" class="headerlink" title="Harbor简介"></a>Harbor简介</h3><p>Harbor 支持基于策略的 Docker 镜像复制功能，这类似于 MySQL 的主从同步， 其可以实现不同的数据中心、不同的运行环境之间同步镜像，并提供友好的管理 界面，大大简化了实际运维中的镜像管理工作，已经有用很多互联网公司使用 harbor 搭建内网 docker 仓库的案例。</p><p>当我们企业企业机器容器众多，一台harbor上传下载导致效率低下的时候，这个时候可以增加机器，做到harbor的双向同步，当然也可以通过反向代理服务从而来实现真正的harbor高可用。</p><h2 id="实战案例：两台harbor数据同步后通过haproxy来做反向代理"><a href="#实战案例：两台harbor数据同步后通过haproxy来做反向代理" class="headerlink" title="实战案例：两台harbor数据同步后通过haproxy来做反向代理"></a>实战案例：两台harbor数据同步后通过haproxy来做反向代理</h2><pre><code>安装需要两个必要条件，安装docker  还需要安装另个工具docer-compose    然后才能安装harbor首先安装好两台harbor，实现镜像的上传和下载都通过haproxy的地址调度，实现上传和下载镜像通过负载均衡器就达到目的，就算挂了一台harbio  负载均衡器依然可以调度到另一台机器#两台harbor安装 步骤一样   #docer-compose 安装wget https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64[15:00:38 root@docker apps]#chmod a+x docker-compose-Linux-x86_64 [15:01:09 root@docker apps]#cp docker-compose-Linux-x86_64 /usr/bin/docker-compose[15:01:46 root@docker apps]#docker-compose version#harbor安装#wget https://github.com/goharbor/harbor/releases/download/v2.2.3/harbor-offline-installer-v2.2.3.tgz[15:02:46 root@docker apps]#tar xvf  harbor-offline-installer-v2.2.3.tgz[15:03:46 root@docker apps]# cd harbor/[15:04:46 root@docker apps]# cp harbor.yml.tmpl harbor.yml[15:05:46 root@docker apps]#vim harbor.yml 把hostanem修改本机IP然后注释https下面四行语句，找到password  修改为自己想要的密码，作为登录web的界面[13:16:45 root@ubuntu1804 harbor]#./install.sh --with-trivy#另外一台harbor安装也一样，安装好之后我们输入IP就可以进入图形化界面，创建自己的项目，在两台机器上分别选择仓库管理和复制管理，做到harbor的双向同步#在找一台机器作为haproxy做两台harbor的代理[13:19:57 root@docker harbor]#sudo apt install haproxy[root@localhost ~]# systemctl restart haproxy;systemctl enable --now haproxy[root@localhost ~]# vim /etc/haproxy/haproxy.cfglisten harbor-80    bind 10.0.0.81:80    mode tcp    balance source    server 10.0.0.8 10.0.0.8:80 check inter 3s fall 3 rise 5    server 10.0.0.18 10.0.0.18:80 check inter 3s fall 3 rise 5 #ss -ntl 查看已经监听在80端口了#找一台有docker的服务器，然后开始测试，需要以下配置[13:19:57 root@docker harbor]#vim /lib/systemd/system/docker.service 在ExecStart=结尾处添加  --insecure-registry 10.0.0.8#haproxy的IP，启动docker[13:32:25 root@ubuntu1804 harbor]#docker login 10.0.0.8#登录成功之后就可以通过haproxy代理去上传下载镜像了，就算挂了一台harbor依然可以通过访问另一台的harbor，上传下载[13:34:47 root@ubuntu1804 harbor]#docker push 10.0.0.8/m44/ubuntu-nginx-v1</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysq高可用</title>
      <link href="/2021/08/02/mysql%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/08/02/mysql%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-mysql部署"><a href="#2-1-mysql部署" class="headerlink" title="2.1 mysql部署"></a>2.1 mysql部署</h2><h3 id="2-1-1-环境介绍"><a href="#2-1-1-环境介绍" class="headerlink" title="2.1.1 环境介绍"></a>2.1.1 环境介绍</h3><h3 id="2-1-2-开始部署mysql主从"><a href="#2-1-2-开始部署mysql主从" class="headerlink" title="2.1.2 开始部署mysql主从"></a>2.1.2 开始部署mysql主从</h3><h4 id="初始化各主机环境"><a href="#初始化各主机环境" class="headerlink" title="初始化各主机环境"></a>初始化各主机环境</h4><p>设置各角色主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master节点配置主机名</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/hostname &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">stage-project-mysql-master</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">hostnamectl set-hostname stage-project-mysql-master &amp;&amp; bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># slave01节点配置主机名</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/hostname &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">stage-project-mysql-slave01</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">hostnamectl set-hostname stage-project-mysql-slave01 &amp;&amp; bash</span><br></pre></td></tr></table></figure><p>创建mysql57的数据目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p  /data/mysql</span><br></pre></td></tr></table></figure><p>磁盘分区并挂载至data数据目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看磁盘情况</span></span><br><span class="line"> lsblk</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0   60G  0 disk</span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   59G  0 part</span><br><span class="line">  └─centos-root 253:0    0   59G  0 lvm  /</span><br><span class="line">sdb               8:16   0  100G  0 disk<span class="comment"># 新添加磁盘</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建lvm卷</span></span><br><span class="line">pvcreate /dev/sdb</span><br><span class="line">vgcreate data /dev/sdb</span><br><span class="line">lvcreate --name data_01 -l 100%FREE data</span><br><span class="line">mkfs.ext4 /dev/mapper/data-data_01</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/fstab&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">/dev/mapper/data-data_01 /data/mysql ext4 defaults,noatime 0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p  /data/mysql</span><br><span class="line"></span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure><h4 id="master安装mysql57"><a href="#master安装mysql57" class="headerlink" title="master安装mysql57"></a>master安装mysql57</h4><p>配置mysql57的yum仓库地址并安装mysql57</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/mysql57-community.repo&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysql57-community]</span></span><br><span class="line"><span class="string">name=MySQL 5.7 Community Server</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.7-community-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum install mysql-community-server -y</span><br><span class="line"><span class="comment">#systemctl start mysqld</span></span><br><span class="line">systemctl status mysqld &amp;&amp; systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure><p>修改mysql的数据目录路径及权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">datadir=/data/mysql</span><br><span class="line">socket=/data/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chown</span> -R mysql:mysql /data/mysql</span><br></pre></td></tr></table></figure><p>启动mysql服务并登录重置默认密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld </span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> global validate_password_policy=0;</span><br><span class="line"><span class="built_in">set</span> global validate_password_length=1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改本地root用户登录的密码。</span></span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># admin账号为普通用户账号，防止root用户的super权限对slave的readonly不生效。</span></span><br><span class="line">grant References,select,index,CREATE VIEW,SHOW VIEW,ALTER ROUTINE,CREATE ROUTINE,EXECUTE on *.* to <span class="string">&#x27;backend_api&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h4><p>master创建repl账号,slave使用此账号来master同步数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave, replication client on *.* to <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看master的初始状态。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> master status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">             File: binlog44<span class="operator">-</span>master<span class="number">.000002</span></span><br><span class="line">         Position: <span class="number">2203</span></span><br><span class="line">     Binlog_Do_DB:</span><br><span class="line"> Binlog_Ignore_DB: information_schema,performation_schema,sys</span><br><span class="line">Executed_Gtid_Set:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>slave使用repl账号去连接master。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=<span class="string">&#x27;192.168.99.58&#x27;</span>,</span><br><span class="line">master_user=<span class="string">&#x27;repl&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_log_file=<span class="string">&#x27;binlog58-master.000002&#x27;</span>,</span><br><span class="line">master_log_pos=1258,</span><br><span class="line">master_connect_retry=30;</span><br><span class="line"></span><br><span class="line">start slave;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-1-3-mysql主从HA配置"><a href="#2-1-3-mysql主从HA配置" class="headerlink" title="2.1.3 mysql主从HA配置"></a>2.1.3 mysql主从HA配置</h3><p>实现思路是：master的优先级为100，backup的优先级为99；在master上面配置一个检测nginx监控状态的脚本（backup不用配置），当发现master的nginx故障后将master的优先级减2为98，使其backup优先级比master高，bakup获取到vip对外提供服务；</p><p>当master服务器上面的mysql服务恢复正常后，master的优先级不减2恢复原来的100，master获取到vip对外提供服务</p><p> 邮件报警实现思路：使用keepalived的状态转换执行脚本参数notify_master|notify_backup；当角色变为master或backup时去调用发送邮件的脚本给指定用户发送邮件通知</p><blockquote><p>参考文档：</p><p><a href="https://blog.csdn.net/guoxilen/article/details/78460445">https://blog.csdn.net/guoxilen/article/details/78460445</a></p><p><a href="https://www.cnblogs.com/dhzg/p/11274811.html">https://www.cnblogs.com/dhzg/p/11274811.html</a></p><p><a href="https://www.cnblogs.com/dannylinux/p/14659310.html">https://www.cnblogs.com/dannylinux/p/14659310.html</a></p><p>配置详解</p><p><a href="https://blog.csdn.net/mofiu/article/details/76644012">https://blog.csdn.net/mofiu/article/details/76644012</a></p><p>抢占和非抢占概念</p><p><a href="https://www.jianshu.com/p/c55956882962">https://www.jianshu.com/p/c55956882962</a></p></blockquote><p>master及slave安装keepalived</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y keepalived</span><br></pre></td></tr></table></figure><h4 id="master配置keepalived"><a href="#master配置keepalived" class="headerlink" title="master配置keepalived"></a>master配置keepalived</h4><p>修改master的keepalived配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[root@stage-project-mysql-master /]<span class="comment"># cat /etc/keepalived/keepalived.conf</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id project_stage_mysql_master</span><br><span class="line">   <span class="comment"># 默认是不跳过检查。检查收到的VRRP通告中的所有地址可能会比较耗时，设置此命令的意思是，如果通告与接收的上一个通告来自相同的master路由器，则不执行检查(跳过检查)。</span></span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   <span class="comment"># 严格遵守VRRP协议。下列情况将会阻止启动Keepalived：1. 没有VIP地址。2. 单播邻居。3. 在VRRP版本2中有IPv6地址。</span></span><br><span class="line">   <span class="comment">#vrrp_strict</span></span><br><span class="line">   <span class="comment"># 不添加任何iptables规则。默认是添加iptables规则的。</span></span><br><span class="line">   vrrp_iptables</span><br><span class="line">   <span class="comment"># 在一个接口发送的两个免费ARP之间的延迟。可以精确到毫秒级。默认是0</span></span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_msql &#123;</span><br><span class="line">    script <span class="string">&quot;/usr/local/bin/check_mysql.sh&quot;</span></span><br><span class="line">    interval 3</span><br><span class="line">    fall 2</span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    nopreempt</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 58</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    notify_master <span class="string">&quot;/etc/keepalived/notify.sh master&quot;</span></span><br><span class="line">    notify_backup <span class="string">&quot;/etc/keepalived/notify.sh backup&quot;</span></span><br><span class="line">    notify_fault <span class="string">&quot;/etc/keepalived/notify.sh fault&quot;</span></span><br><span class="line">    unicast_src_ip 192.168.99.58</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        192.168.99.59</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass project_stage_mysql_ha</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_msql</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.249 dev eth0 labl eth0:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加check_mysql的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /usr/local/bin/check_mysql.sh&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">MYSQL=mysql</span></span><br><span class="line"><span class="string">MYSQL_HOST=localhost</span></span><br><span class="line"><span class="string">MYSQL_USER=root</span></span><br><span class="line"><span class="string">MYSQL_PASSWORD=xxx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql -uroot -p\$MYSQL_PASSWORD -e &quot;show status;&quot; &gt;/dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string">if [ \$? == 0 ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    echo &quot; \$host mysql login successfully &quot;</span></span><br><span class="line"><span class="string">    exit 0</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">    echo &quot; \$host mysql login faild&quot;</span></span><br><span class="line"><span class="string">    #/etc/init.d/keepalived stop</span></span><br><span class="line"><span class="string">    exit 1</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="Slave配置keepalived"><a href="#Slave配置keepalived" class="headerlink" title="Slave配置keepalived"></a>Slave配置keepalived</h4><p>master将check_mysql脚本传送到slve机器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传送check_mysql脚本</span></span><br><span class="line">$ scp /usr/local/bin/check_mysql.sh root@192.168.99.59:/usr/local/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传送keepalived配置文件</span></span><br><span class="line">$ scp /etc/keepalived/keepalived.conf root@192.168.99.59:/etc/keepalived/</span><br></pre></td></tr></table></figure><p>修改slave的keepalived配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@stage-project-mysql-slave01 ~]<span class="comment"># cat /etc/keepalived/keepalived.conf</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id project_stage_mysql_slave</span><br><span class="line">   <span class="comment"># 默认是不跳过检查。检查收到的VRRP通告中的所有地址可能会比较耗时，设置此命令的意思是，如果通告与接收的上一个通告来自相同的master路由器，则不执行检查(跳过检查)。</span></span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   <span class="comment"># 严格遵守VRRP协议。下列情况将会阻止启动Keepalived：1. 没有VIP地址。2. 单播邻居。3. 在VRRP版本2中有IPv6地址。</span></span><br><span class="line">   <span class="comment">#vrrp_strict</span></span><br><span class="line">   <span class="comment"># 不添加任何iptables规则。默认是添加iptables规则的。</span></span><br><span class="line">   vrrp_iptables</span><br><span class="line">   <span class="comment"># 在一个接口发送的两个免费ARP之间的延迟。可以精确到毫秒级。默认是0</span></span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_msql &#123;</span><br><span class="line">    script <span class="string">&quot;/usr/local/bin/check_mysql.sh&quot;</span></span><br><span class="line">    interval 3</span><br><span class="line">    fall 2</span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    nopreempt</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 58</span><br><span class="line">    priority 80</span><br><span class="line">    advert_int 1</span><br><span class="line">    notify_master <span class="string">&quot;/etc/keepalived/notify.sh master&quot;</span></span><br><span class="line">    notify_backup <span class="string">&quot;/etc/keepalived/notify.sh backup&quot;</span></span><br><span class="line">    notify_fault <span class="string">&quot;/etc/keepalived/notify.sh fault&quot;</span></span><br><span class="line">    unicast_src_ip 192.168.99.59</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        192.168.99.58</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass project_stage_mysql_ha</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_msql</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.249 dev eth0 labl eth0:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>keepalived加入到开机自启并启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master 先启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> keepalived &amp;&amp; systemctl start keepalived &amp;&amp; systemctl status keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment"># slave后启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> keepalived &amp;&amp; systemctl start keepalived &amp;&amp; systemctl status keepalived</span><br></pre></td></tr></table></figure><h4 id="测试结论"><a href="#测试结论" class="headerlink" title="测试结论"></a>测试结论</h4><p>1、master首先启动后master获得vip权限，slave后启动为backup状态。</p><p>2、当master的keepalived进程停止后，vip会从master漂移至slave上（进程重新启动vip不会漂移至master，因为是非抢占模式）。</p><p>3、当master的mysqld健康检查不通过时，vip会从master漂移至slave上（mysqld重新启动vip不会漂移至master，因为是非抢占模式）。</p><p>4、问题解决：当master修复完毕之后，如果要将vip从slave漂移至master，就将master的keepalived和mysqld服务启动，然后停止一下slave的keepalived进程再启动，这样vip就漂移至master了。</p><h4 id="配置ip切换邮件告警"><a href="#配置ip切换邮件告警" class="headerlink" title="配置ip切换邮件告警"></a>配置ip切换邮件告警</h4><p>添加通知脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/keepalived/notify.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">contact=<span class="string">&#x27;614214568@qq.com&#x27;</span></span><br><span class="line"><span class="function"><span class="title">notify</span></span>() &#123;</span><br><span class="line">    mailsubject=<span class="string">&quot;<span class="subst">$(hostname)</span> to be <span class="variable">$1</span>, vip转移&quot;</span></span><br><span class="line">    mailbody=<span class="string">&quot;<span class="subst">$(date +&#x27;%F %T&#x27;)</span>: vrrp transition, <span class="subst">$(hostname)</span> changed to be <span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$mailbody</span>&quot;</span> | mail -s <span class="string">&quot;<span class="variable">$mailsubject</span>&quot;</span> <span class="variable">$contact</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">master)</span><br><span class="line">    notify master</span><br><span class="line">    ;;</span><br><span class="line">backup)</span><br><span class="line">    notify backup</span><br><span class="line">    ;;</span><br><span class="line">fault)</span><br><span class="line">    notify fault</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage:(basename <span class="variable">$0</span>) &#123;master|backup|fault&#125;&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chmod</span> +x /etc/keepalived/notify.sh</span><br></pre></td></tr></table></figure><p>配置smtp信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install mailx</span><br><span class="line">$ vim /etc/mail.rc</span><br><span class="line"><span class="built_in">set</span> from=smtp@xxx.cn</span><br><span class="line"><span class="built_in">set</span> smtp=smtp.qiye.aliyun.com</span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=<span class="string">&quot;smtp@xxx.cn&quot;</span> smtp-auth-password=<span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth=login</span><br></pre></td></tr></table></figure><p>添加脚本到keepalived配置文件中并重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/keepalived/keepalived.conf</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 58</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    nopreempt</span><br><span class="line">    notify_master <span class="string">&quot;/etc/keepalived/notify.sh master&quot;</span><span class="comment"># 状态变为 master执行脚本</span></span><br><span class="line">    notify_backup <span class="string">&quot;/etc/keepalived/notify.sh backup&quot;</span><span class="comment"># 状态变为 backup执行脚本</span></span><br><span class="line">    notify_fault <span class="string">&quot;/etc/keepalived/notify.sh fault&quot;</span><span class="comment"># 状态变为fault执行脚本</span></span><br><span class="line">    ...... 省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="/guestbook/index.html"/>
      <url>/guestbook/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a>欢迎来到我的博客！</h1><blockquote><p>欢迎在这里留言！任何问题都可以在这里留言，我会及时回复的，添加email可以获得更快的回复速度，在昵称栏目输入QQ号可以直接获取你的QQ头像。</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tages</title>
      <link href="/tages/index.html"/>
      <url>/tages/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
